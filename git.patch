Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(date 1432685042000)
+++ .gitignore	(date 1432685042000)
@@ -0,0 +1,211 @@
+
+# Created by https://www.gitignore.io/api/java,intellij,eclipse,windows,linux,osx,maven,gradle
+
+### Java ###
+*.class
+
+# Mobile Tools for Java (J2ME)
+.mtj.tmp/
+
+# Package Files #
+*.jar
+*.war
+*.ear
+
+# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
+hs_err_pid*
+
+
+### Intellij ###
+# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and Webstorm
+# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839
+
+# User-specific stuff:
+.idea/workspace.xml
+.idea/tasks.xml
+.idea/dictionaries
+.idea/vcs.xml
+.idea/jsLibraryMappings.xml
+
+# Sensitive or high-churn files:
+.idea/dataSources.ids
+.idea/dataSources.xml
+.idea/dataSources.local.xml
+.idea/sqlDataSources.xml
+.idea/dynamic.xml
+.idea/uiDesigner.xml
+
+# Gradle:
+.idea/gradle.xml
+.idea/libraries
+
+# Mongo Explorer plugin:
+.idea/mongoSettings.xml
+
+## File-based project format:
+*.iws
+
+## Plugin-specific files:
+
+# IntelliJ
+/out/
+
+# mpeltonen/sbt-idea plugin
+.idea_modules/
+
+# JIRA plugin
+atlassian-ide-plugin.xml
+
+# Crashlytics plugin (for Android Studio and IntelliJ)
+com_crashlytics_export_strings.xml
+crashlytics.properties
+crashlytics-build.properties
+fabric.properties
+
+### Intellij Patch ###
+*.iml
+
+
+### Eclipse ###
+
+.metadata
+bin/
+tmp/
+*.tmp
+*.bak
+*.swp
+*~.nib
+local.properties
+.settings/
+.loadpath
+.recommenders
+
+# Eclipse Core
+.project
+
+# External tool builders
+.externalToolBuilders/
+
+# Locally stored "Eclipse launch configurations"
+*.launch
+
+# PyDev specific (Python IDE for Eclipse)
+*.pydevproject
+
+# CDT-specific (C/C++ Development Tooling)
+.cproject
+
+# JDT-specific (Eclipse Java Development Tools)
+.classpath
+
+# Java annotation processor (APT)
+.factorypath
+
+# PDT-specific (PHP Development Tools)
+.buildpath
+
+# sbteclipse plugin
+.target
+
+# Tern plugin
+.tern-project
+
+# TeXlipse plugin
+.texlipse
+
+# STS (Spring Tool Suite)
+.springBeans
+
+# Code Recommenders
+.recommenders/
+
+
+### Windows ###
+# Windows image file caches
+Thumbs.db
+ehthumbs.db
+
+# Folder config file
+Desktop.ini
+
+# Recycle Bin used on file shares
+$RECYCLE.BIN/
+
+# Windows Installer files
+*.cab
+*.msi
+*.msm
+*.msp
+
+# Windows shortcuts
+*.lnk
+
+
+### Linux ###
+*~
+
+# temporary files which can be created if a process still has a handle open of a deleted file
+.fuse_hidden*
+
+# KDE directory preferences
+.directory
+
+# Linux trash folder which might appear on any partition or disk
+.Trash-*
+
+
+### OSX ###
+.DS_Store
+.AppleDouble
+.LSOverride
+
+# Icon must end with two \r
+Icon
+
+
+# Thumbnails
+._*
+
+# Files that might appear in the root of a volume
+.DocumentRevisions-V100
+.fseventsd
+.Spotlight-V100
+.TemporaryItems
+.Trashes
+.VolumeIcon.icns
+
+# Directories potentially created on remote AFP share
+.AppleDB
+.AppleDesktop
+Network Trash Folder
+Temporary Items
+.apdisk
+
+
+### Maven ###
+target/
+pom.xml.tag
+pom.xml.releaseBackup
+pom.xml.versionsBackup
+pom.xml.next
+release.properties
+dependency-reduced-pom.xml
+buildNumber.properties
+.mvn/timing.properties
+
+
+### Gradle ###
+.gradle
+build/
+
+# Ignore Gradle GUI config
+gradle-app.setting
+
+# Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)
+!gradle-wrapper.jar
+
+# Cache of project
+.gradletasknamecache
+
+# # Work around https://youtrack.jetbrains.com/issue/IDEA-116898
+# gradle/wrapper/gradle-wrapper.properties
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/.name	(date 1432685042000)
+++ .idea/.name	(date 1432685042000)
@@ -0,0 +1,1 @@
+movierental
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1432685042000)
+++ .idea/misc.xml	(date 1432685042000)
@@ -0,0 +1,57 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ClientPropertiesManager">
+    <properties class="javax.swing.AbstractButton">
+      <property name="hideActionText" class="java.lang.Boolean" />
+    </properties>
+    <properties class="javax.swing.JComponent">
+      <property name="html.disable" class="java.lang.Boolean" />
+    </properties>
+    <properties class="javax.swing.JEditorPane">
+      <property name="JEditorPane.w3cLengthUnits" class="java.lang.Boolean" />
+      <property name="JEditorPane.honorDisplayProperties" class="java.lang.Boolean" />
+      <property name="charset" class="java.lang.String" />
+    </properties>
+    <properties class="javax.swing.JList">
+      <property name="List.isFileList" class="java.lang.Boolean" />
+    </properties>
+    <properties class="javax.swing.JPasswordField">
+      <property name="JPasswordField.cutCopyAllowed" class="java.lang.Boolean" />
+    </properties>
+    <properties class="javax.swing.JSlider">
+      <property name="Slider.paintThumbArrowShape" class="java.lang.Boolean" />
+      <property name="JSlider.isFilled" class="java.lang.Boolean" />
+    </properties>
+    <properties class="javax.swing.JTable">
+      <property name="Table.isFileList" class="java.lang.Boolean" />
+      <property name="JTable.autoStartsEdit" class="java.lang.Boolean" />
+      <property name="terminateEditOnFocusLost" class="java.lang.Boolean" />
+    </properties>
+    <properties class="javax.swing.JToolBar">
+      <property name="JToolBar.isRollover" class="java.lang.Boolean" />
+    </properties>
+    <properties class="javax.swing.JTree">
+      <property name="JTree.lineStyle" class="java.lang.String" />
+    </properties>
+    <properties class="javax.swing.text.JTextComponent">
+      <property name="caretAspectRatio" class="java.lang.Double" />
+      <property name="caretWidth" class="java.lang.Integer" />
+    </properties>
+  </component>
+  <component name="EntryPointsManager">
+    <entry_points version="2.0" />
+  </component>
+  <component name="ProjectLevelVcsManager" settingsEditedManually="false">
+    <OptionsSetting value="true" id="Add" />
+    <OptionsSetting value="true" id="Remove" />
+    <OptionsSetting value="true" id="Checkout" />
+    <OptionsSetting value="true" id="Update" />
+    <OptionsSetting value="true" id="Status" />
+    <OptionsSetting value="true" id="Edit" />
+    <ConfirmationsSetting value="0" id="Add" />
+    <ConfirmationsSetting value="0" id="Remove" />
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="false" assert-keyword="true" jdk-15="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(date 1432685042000)
+++ .idea/modules.xml	(date 1432685042000)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/movierental.iml" filepath="$PROJECT_DIR$/movierental.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(date 1432685042000)
+++ .idea/compiler.xml	(date 1432685042000)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <resourceExtensions />
+    <wildcardResourcePatterns>
+      <entry name="!?*.java" />
+      <entry name="!?*.form" />
+      <entry name="!?*.class" />
+      <entry name="!?*.groovy" />
+      <entry name="!?*.scala" />
+      <entry name="!?*.flex" />
+      <entry name="!?*.kt" />
+      <entry name="!?*.clj" />
+      <entry name="!?*.aj" />
+    </wildcardResourcePatterns>
+    <annotationProcessing>
+      <profile default="true" name="Default" enabled="false">
+        <processorPath useClasspath="true" />
+      </profile>
+    </annotationProcessing>
+  </component>
+</project>
\ No newline at end of file
Index: test/OldTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/OldTests.java	(date 1483525700000)
+++ test/OldTests.java	(date 1483525700000)
@@ -0,0 +1,214 @@
+import at.ac.tuwien.qs.movierental.*;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import java.time.LocalDate;
+import java.time.Year;
+import java.time.format.DateTimeFormatter;
+
+import static org.junit.Assert.assertTrue;
+
+/**
+ * These are some old tests. I refactored the name of the class.
+ * If anyone has the time please refactor these tests.
+ */
+public class OldTests {
+
+    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("dd. MM. yyyy");
+    private static Customer youngCustomer, oldCustomer;
+    private static Movie badMovie, goodMovie;
+    private static Rental rental;
+    private static RentalController rentalController;
+
+    @BeforeClass
+    public static void setUp() {
+        youngCustomer = new Customer();
+        oldCustomer = new Customer();
+        badMovie = new Movie();
+        goodMovie = new Movie();
+        rental = new Rental();
+        rentalController = new RentalController();
+    }
+    @Before
+    public void beforeEachTest() {
+        //yountCustomer
+       initialYoungCustomer();
+        //badMovie
+       initalBadMovie();
+        //goodMovie
+       initialGoodMovie();
+       //oldCustomer
+        initialOldCustomer();
+       rental= new Rental();
+       rentalController=new RentalController();
+
+    }
+    @After
+    public void afterEachTest(){
+        System.out.println("");
+    }
+
+    /**
+     * rental is null --> ValidationException("Rental has to be not null");
+     */
+    @Test
+    public void testRentalValidationRentalIsNull() {
+        System.out.println("testRentalValidationRentalIsNull(): ");
+        rental =null;
+        testvalidateRental(rental);
+    }
+
+    /**
+     * Only movie is set --> ValidationException("Kunde muss gesetzt sein.");
+     */
+    @Test
+    public void testRentalValidationOnlyMovieIsSet() {
+        System.out.println("testRentalValidationOnlyMovieIsSet(): ");
+        rental.setMovie(goodMovie);
+        testvalidateRental(rental);
+    }
+    /**
+     * Only customer is set --> ValidationException("Film muss gesetzt sein.");
+     */
+    @Test
+    public void testRentalValidationOnlyCostumerIsSet() {
+        System.out.println("testRentalValidationOnlyCostumerIsSet(): ");
+        rental.setCustomer(youngCustomer);
+        testvalidateRental(rental);
+    }
+
+    /**
+     * Nothing is set --> ValidationException("Kunde muss gesetzt sein.");
+     */
+    @Test
+    public void testRentalValidationNothingIsSet() {
+        System.out.println("testRentalValidationNothingIsSet(): ");
+        testvalidateRental(rental);
+    }
+
+    /**
+     * Customer and Movie is set --> ValidationException("Verleihtag muss gesetzt sein.");
+     */
+    @Test
+    public void testRentalValidationCustomerAndMovieIsSet() {
+        System.out.println("testRentalValidationCustomerAndMovieIsSet(): ");
+        rental.setCustomer(youngCustomer);
+        rental.setMovie(goodMovie);
+        testvalidateRental(rental);
+    }
+
+    /**
+     * All is set but young customer and bad movie --> ValidationException("Der Kunde erfüllt die Altersfreigabe nicht! (FSK 18)");
+     */
+    @Test
+    public void testRentalValidationAllSetBadMovieYoungCustomer() {
+        System.out.println("testRentalValidationAllSetBadMovieYoungCustomer(): ");
+
+        rental.setMovie(badMovie);
+        rental.setCustomer(youngCustomer);
+        rental.setDateLent(LocalDate.now());
+        testvalidateRental(rental);
+    }
+
+    /**
+     * All is set and young customer and good movie --> passed
+     */
+    @Test
+    public void testRentalValidationAllSetGoodMovieYoungCustomer() {
+        System.out.println("testRentalValidationAllSetGoodMovieYoungCustomer(): ");
+        rental.setMovie(goodMovie);
+        rental.setCustomer(youngCustomer);
+        rental.setDateLent(LocalDate.now());
+        testvalidateRental(rental);
+    }
+
+    /**
+     * All is set but old customer and bad movie --> passed
+     */
+    @Test
+    public void testRentalValidationAllSetBadMovieOldCustomer() {
+        System.out.println("testRentalValidationAllSetBadMovieOldCustomer(): ");
+        rental.setMovie(badMovie);
+        rental.setCustomer(oldCustomer);
+        rental.setDateLent(LocalDate.now());
+        testvalidateRental(rental);
+    }
+
+    /**
+     * um doppelten Code zu vermeide
+     * die Methode testvalidateRental(Rental rental) erstellt
+     */
+    private void testvalidateRental(Rental rental){
+            try {
+                rentalController.validateRental(rental);
+                System.out.println("Test passed");
+            } catch (ValidationException e) {
+                System.out.println(e);
+            }
+    }
+    /**
+     * Auslagerung der initialisierung
+     */
+    private static void initialYoungCustomer(){
+        youngCustomer.setId(1L);
+        youngCustomer.setFirstName("Linda");
+        youngCustomer.setLastName("Mayer");
+        youngCustomer.setEmail("Lucy2001@hotmail.com");
+        youngCustomer.setPhone("+43 555 61 61");
+        youngCustomer.setBirthday(LocalDate.parse("01. 04. 2010", DATE_TIME_FORMATTER));
+        youngCustomer.setAddress("Berggasse 11");
+        youngCustomer.setZipCode("3002");
+        youngCustomer.setCity("Purkersdorf");
+        youngCustomer.setPatron(true);
+        youngCustomer.setPhoto(null);
+        youngCustomer.setVideopoints(2);
+    }
+    private static void initialOldCustomer(){
+        oldCustomer.setId(1L);
+        oldCustomer.setFirstName("Linda");
+        oldCustomer.setLastName("Mayer");
+        oldCustomer.setEmail("Lucy2001@hotmail.com");
+        oldCustomer.setPhone("+43 555 61 61");
+        oldCustomer.setBirthday(LocalDate.parse("01. 04. 1970", DATE_TIME_FORMATTER));
+        oldCustomer.setAddress("Berggasse 11");
+        oldCustomer.setZipCode("3002");
+        oldCustomer.setCity("Purkersdorf");
+        oldCustomer.setPatron(true);
+        oldCustomer.setPhoto(null);
+        oldCustomer.setVideopoints(2);
+    }
+    private static void initalBadMovie(){
+        badMovie.setId(1L);
+        badMovie.setTitle("SAW III");
+        badMovie.setSubtitle("");
+        badMovie.setGenre("Horror");
+        badMovie.setAgeRating("FSK 18");
+        badMovie.setLanguage("English");
+        badMovie.setPriceInCents(200);
+        badMovie.setDirector("");
+        badMovie.setRating(3.2F);
+        badMovie.setYearPublished(Year.of(2002));
+        badMovie.setSeries(false);
+        badMovie.setStock(3);
+        badMovie.setCover(null);
+    }
+    private static void initialGoodMovie(){
+        goodMovie.setId(2L);
+        goodMovie.setTitle("Der Lorax");
+        goodMovie.setSubtitle("");
+        goodMovie.setGenre("Kinder");
+        goodMovie.setAgeRating("FSK 0");
+        goodMovie.setLanguage("German");
+        goodMovie.setPriceInCents(120);
+        goodMovie.setDirector("Chris Renaud");
+        goodMovie.setRating(3.0F);
+        goodMovie.setYearPublished(Year.of(2012));
+        goodMovie.setSeries(false);
+        goodMovie.setStock(8);
+        goodMovie.setCover(null);
+    }
+}
+
+
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/encodings.xml	(date 1432685042000)
+++ .idea/encodings.xml	(date 1432685042000)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/at/ac/tuwien/qs/movierental/CustomerManagementController.java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/at/ac/tuwien/qs/movierental/DummyCustomerDAO.java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/at/ac/tuwien/qs/movierental/DummyMovieDAO.java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/at/ac/tuwien/qs/movierental/DummyRentalDAO.java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/at/ac/tuwien/qs/movierental/MovieManagementController.java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/at/ac/tuwien/qs/movierental/RentalController.java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/at/ac/tuwien/qs/movierental/SimpleInvoiceService.java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/at/ac/tuwien/qs/movierental/ui/controller/MovieRentalController.java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/at/ac/tuwien/qs/movierental/ui/controls/EuroCell.java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/at/ac/tuwien/qs/movierental/ui/controls/RentalActionButton.java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/test/InvoiceTest.java" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: resource/log4j2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- resource/log4j2.xml	(date 1432685042000)
+++ resource/log4j2.xml	(date 1432685042000)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Configuration status="WARN">
+    <Appenders>
+        <Console name="Console" target="SYSTEM_OUT">
+            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
+        </Console>
+    </Appenders>
+    <Loggers>
+        <Root level="ALL">
+            <AppenderRef ref="Console"/>
+        </Root>
+    </Loggers>
+</Configuration>
\ No newline at end of file
Index: test/InvoiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/InvoiceTest.java	(date 1432685042000)
+++ test/InvoiceTest.java	(date 1432685042000)
@@ -0,0 +1,109 @@
+import at.ac.tuwien.qs.movierental.Customer;
+import at.ac.tuwien.qs.movierental.Movie;
+import at.ac.tuwien.qs.movierental.Rental;
+import at.ac.tuwien.qs.movierental.SimpleInvoiceService;
+import org.junit.Test;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.Year;
+import java.time.format.DateTimeFormatter;
+import java.util.ArrayList;
+
+import static org.hamcrest.core.Is.is;
+import static org.hamcrest.junit.MatcherAssert.assertThat;
+
+public class InvoiceTest {
+
+    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("dd. MM. yyyy");
+
+    @Test
+    public void testIncvoicePreview() {
+        LocalDateTime now = LocalDateTime.parse("2007-12-03T10:15:30");
+        Customer customer = new Customer();
+        customer.setId(1L);
+        customer.setFirstName("Johann");
+        customer.setLastName("Fischer");
+        customer.setEmail("angler@gmail.com");
+        customer.setPhone("+43 674 156 45 78");
+        customer.setBirthday(LocalDate.parse("23. 05. 1960", DATE_TIME_FORMATTER));
+        customer.setAddress("Neustiftgasse 31");
+        customer.setZipCode("1070");
+        customer.setCity("Wien");
+        customer.setPatron(true);
+        customer.setPhoto(null);
+        customer.setVideopoints(12);
+        Movie movie1 = new Movie();
+        movie1.setId(1L);
+        movie1.setTitle("Der Herr der Ringe");
+        movie1.setSubtitle("Die Gefährten");
+        movie1.setGenre("Fantasy");
+        movie1.setAgeRating("FSK 12");
+        movie1.setLanguage("German");
+        movie1.setPriceInCents(300);
+        movie1.setDirector("Peter Jackson");
+        movie1.setRating(4.9F);
+        movie1.setYearPublished(Year.of(2001));
+        movie1.setSeries(true);
+        movie1.setStock(10);
+        movie1.setCover(null);
+        Movie movie2 = new Movie();
+        movie2.setId(2L);
+        movie2.setTitle("Der Herr der Ringe");
+        movie2.setSubtitle("Die zwei Türme");
+        movie2.setGenre("Fantasy");
+        movie2.setAgeRating("FSK 12");
+        movie2.setLanguage("German");
+        movie2.setPriceInCents(400);
+        movie2.setDirector("Peter Jackson");
+        movie2.setRating(4.6F);
+        movie2.setYearPublished(Year.of(2002));
+        movie2.setSeries(true);
+        movie2.setStock(8);
+        movie2.setCover(null);
+        Rental rental1 = new Rental();
+        rental1.setId(1L);
+        rental1.setDateLent(now.toLocalDate().minusDays(1));
+        rental1.setCustomer(customer);
+        rental1.setMovie(movie1);
+        Rental rental2 = new Rental();
+        rental2.setId(2L);
+        rental2.setDateLent(now.toLocalDate());
+        rental2.setCustomer(customer);
+        rental2.setMovie(movie2);
+        SimpleInvoiceService simpleInvoiceService = new SimpleInvoiceService();
+        ArrayList<Rental> rentalList1 = new ArrayList<>();
+        rentalList1.add(rental1);
+        ArrayList<Rental> rentalList2 = new ArrayList<>();
+        rentalList2.add(rental2);
+        assertThat(simpleInvoiceService.generateIncoicePreview(customer, rentalList1, rentalList2, now), is(
+                "Kundennummer:                                    1\n" +
+                        "Kunde:                             FISCHER, Johann\n" +
+                        "Datum/Zeit:                   03. Dez 2007 / 10:15\n" +
+                        "\n" +
+                        "----------------- Zurückgebracht -----------------\n" +
+                        "\n" +
+                        "1; Der Herr der Ringe - Die Ge...           € 7,50\n" +
+                        "\n" +
+                        "------------------- Ausgeborgt -------------------\n" +
+                        "\n" +
+                        "2; Der Herr der Ringe - Die zw...       € 5,00/tag\n" +
+                        "\n" +
+                        "------------------- Videopoints ------------------\n" +
+                        "\n" +
+                        "Bisherige Videopoints:                          12\n" +
+                        "Verbrauch Videopoints:                          10\n" +
+                        "Gutschrift Videopoints:                          4\n" +
+                        "Neue Videopoints:                                6\n" +
+                        "\n" +
+                        "--------------------- Rabatte --------------------\n" +
+                        "\n" +
+                        "Stammkunde:                                     Ja\n" +
+                        "Rabatt:                                       3,5%\n" +
+                        "\n" +
+                        "------------------- Abrechnung -------------------\n" +
+                        "\n" +
+                        "Zu zahlender Betrag:                        € 7,25\n"
+        ));
+    }
+}
Index: test/TestDiscount.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/TestDiscount.java	(date 1432685042000)
+++ test/TestDiscount.java	(date 1432685042000)
@@ -0,0 +1,3 @@
+
+public class TestDiscount {
+}
Index: test/TestAgeRating.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/TestAgeRating.java	(date 1432685042000)
+++ test/TestAgeRating.java	(date 1432685042000)
@@ -0,0 +1,3 @@
+
+public class TestAgeRating {
+}
Index: resource/fxml/rental.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- resource/fxml/rental.fxml	(date 1432685042000)
+++ resource/fxml/rental.fxml	(date 1432685042000)
@@ -0,0 +1,159 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.image.*?>
+<?import javafx.scene.text.*?>
+<?import javafx.geometry.*?>
+<?import javafx.scene.control.*?>
+<?import java.lang.*?>
+<?import javafx.scene.layout.*?>
+
+<GridPane xmlns="http://javafx.com/javafx/8.0.40" xmlns:fx="http://javafx.com/fxml/1" fx:controller="at.ac.tuwien.qs.movierental.RentalController">
+  <columnConstraints>
+    <ColumnConstraints hgrow="SOMETIMES" minWidth="250.0" prefWidth="250.0" />
+      <ColumnConstraints hgrow="SOMETIMES" maxWidth="25.0" minWidth="25.0" prefWidth="25.0" />
+    <ColumnConstraints hgrow="SOMETIMES" minWidth="300.0" prefWidth="300.0" />
+      <ColumnConstraints hgrow="SOMETIMES" maxWidth="25.0" minWidth="25.0" prefWidth="25.0" />
+      <ColumnConstraints hgrow="SOMETIMES" minWidth="400.0" prefWidth="400.0" />
+  </columnConstraints>
+  <rowConstraints>
+      <RowConstraints vgrow="NEVER" />
+    <RowConstraints vgrow="NEVER" />
+      <RowConstraints maxHeight="200.0" minHeight="100.0" percentHeight="30.0" prefHeight="150.0" vgrow="SOMETIMES" />
+      <RowConstraints vgrow="NEVER" />
+    <RowConstraints maxHeight="25.0" minHeight="25.0" prefHeight="25.0" vgrow="SOMETIMES" />
+      <RowConstraints vgrow="NEVER" />
+    <RowConstraints minHeight="200.0" vgrow="SOMETIMES" />
+      <RowConstraints vgrow="NEVER" />
+  </rowConstraints>
+   <children>
+      <Label text="Kunden">
+         <font>
+            <Font name="System Bold" size="13.0" />
+         </font>
+         <GridPane.margin>
+            <Insets bottom="5.0" />
+         </GridPane.margin>
+         <graphic>
+            <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+               <image>
+                  <Image url="@../images/users.png" />
+               </image>
+            </ImageView>
+         </graphic>
+      </Label>
+      <Label text="Verleihübersicht" GridPane.rowIndex="5">
+         <font>
+            <Font name="System Bold" size="13.0" />
+         </font>
+         <GridPane.margin>
+            <Insets bottom="5.0" />
+         </GridPane.margin>
+         <graphic>
+            <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+               <image>
+                  <Image url="@../images/overview.png" />
+               </image>
+            </ImageView>
+         </graphic>
+      </Label>
+      <Label text="Filme" GridPane.columnIndex="2">
+         <font>
+            <Font name="System Bold" size="13.0" />
+         </font>
+         <GridPane.margin>
+            <Insets bottom="5.0" />
+         </GridPane.margin>
+         <graphic>
+            <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+               <image>
+                  <Image url="@../images/movie.png" />
+               </image>
+            </ImageView>
+         </graphic>
+      </Label>
+      <Label text="Rechnung" GridPane.columnIndex="4">
+         <font>
+            <Font name="System Bold" size="13.0" />
+         </font>
+         <padding>
+            <Insets bottom="5.0" />
+         </padding>
+         <graphic>
+            <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+               <image>
+                  <Image url="@../images/invoice.png" />
+               </image>
+            </ImageView>
+         </graphic>
+      </Label>
+      <TextField fx:id="txtSearchCustomer" promptText="Suche..." GridPane.rowIndex="1">
+         <GridPane.margin>
+            <Insets bottom="5.0" />
+         </GridPane.margin>
+      </TextField>
+      <ListView fx:id="lstCustomers" GridPane.rowIndex="2" />
+      <ToggleButton fx:id="tglSelectCustomer" maxWidth="1.7976931348623157E308" mnemonicParsing="false" onAction="#selectCustomer" text="Kunde wählen" GridPane.rowIndex="3">
+         <GridPane.margin>
+            <Insets top="5.0" />
+         </GridPane.margin>
+         <graphic>
+            <ImageView fx:id="imgSelectCustomer" fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+               <image>
+                  <Image url="@../images/selectUser.png" />
+               </image>
+            </ImageView>
+         </graphic>
+      </ToggleButton>
+      <TextField fx:id="txtSearchMovie" disable="true" promptText="Suche..." GridPane.columnIndex="2" GridPane.rowIndex="1">
+         <GridPane.margin>
+            <Insets bottom="5.0" />
+         </GridPane.margin>
+      </TextField>
+      <ListView fx:id="lstMovies" disable="true" GridPane.columnIndex="2" GridPane.rowIndex="2" />
+      <Button fx:id="btnAddMovie" disable="true" maxWidth="1.7976931348623157E308" mnemonicParsing="false" onAction="#addMovie" text="Auswahl hinzufügen" GridPane.columnIndex="2" GridPane.rowIndex="3">
+         <GridPane.margin>
+            <Insets top="5.0" />
+         </GridPane.margin>
+         <graphic>
+            <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+               <image>
+                  <Image url="@../images/add.png" />
+               </image>
+            </ImageView>
+         </graphic>
+      </Button>
+      <TableView fx:id="tblRentalOverview" disable="true" prefHeight="200.0" GridPane.columnSpan="3" GridPane.hgrow="ALWAYS" GridPane.rowIndex="6" GridPane.rowSpan="2" GridPane.vgrow="ALWAYS">
+         <columns>
+            <TableColumn fx:id="tcMovieID" maxWidth="110.0" minWidth="110.0" prefWidth="110.0" text="Filmnummer" />
+            <TableColumn fx:id="tcTitle" maxWidth="500.0" minWidth="110.0" prefWidth="125.0" text="Filmtitle" />
+            <TableColumn fx:id="tcLentDate" maxWidth="150.0" minWidth="110.0" prefWidth="125.0" text="Entleihdatum" />
+            <TableColumn fx:id="tcAction" maxWidth="150.0" minWidth="150.0" prefWidth="150.0" text="Aktion" />
+         </columns>
+         <columnResizePolicy>
+            <TableView fx:constant="CONSTRAINED_RESIZE_POLICY" />
+         </columnResizePolicy></TableView>
+      <TextArea fx:id="txtInvoice" disable="true" editable="false" maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" GridPane.columnIndex="4" GridPane.rowIndex="1" GridPane.rowSpan="6">
+         <GridPane.margin>
+            <Insets />
+         </GridPane.margin>
+         <font>
+            <Font name="Monospaced Regular" size="12.0" />
+         </font>
+      </TextArea>
+      <Button fx:id="btnCompleteRental" disable="true" maxWidth="1.7976931348623157E308" mnemonicParsing="false" onAction="#completeRental" text="Buchung bezahlt und Vorgang abschließen" GridPane.columnIndex="4" GridPane.rowIndex="7">
+         <GridPane.margin>
+            <Insets top="5.0" />
+         </GridPane.margin>
+         <graphic>
+            <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+               <image>
+                  <Image url="@../images/pay.png" />
+               </image>
+            </ImageView>
+         </graphic>
+      </Button>
+   </children>
+   <padding>
+      <Insets bottom="10.0" left="10.0" right="10.0" top="10.0" />
+   </padding>
+</GridPane>
Index: test/TestMoviePoints.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/TestMoviePoints.java	(date 1432685042000)
+++ test/TestMoviePoints.java	(date 1432685042000)
@@ -0,0 +1,3 @@
+
+public class TestMoviePoints {
+}
Index: test/TestRatingService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/TestRatingService.java	(date 1432685042000)
+++ test/TestRatingService.java	(date 1432685042000)
@@ -0,0 +1,59 @@
+import at.ac.tuwien.qs.movierental.Movie;
+import at.ac.tuwien.qs.movierental.NoMovieFoundException;
+import at.ac.tuwien.qs.movierental.ServiceNotAvailableException;
+import at.ac.tuwien.qs.movierental.TooManyMoviesFound;
+import at.ac.tuwien.qs.movierental.MovieDataService;
+import at.ac.tuwien.qs.movierental.RatingService;
+import at.ac.tuwien.qs.movierental.SimpleRatingService;
+import at.ac.tuwien.qs.movierental.TheMovieDbMovieDataService;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import java.time.Year;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.core.Is.is;
+
+public class TestRatingService {
+
+    private static RatingService ratingService;
+
+    @BeforeClass
+    public static void setUp() {
+        MovieDataService movieDataService = new TheMovieDbMovieDataService();
+        ratingService = new SimpleRatingService(movieDataService);
+    }
+
+    @Test(expected=TooManyMoviesFound.class)
+    public void testTooManyMoviesFound() throws NoMovieFoundException, TooManyMoviesFound, ServiceNotAvailableException {
+        Movie movie = new Movie();
+        movie.setTitle("Bambi");
+        ratingService.laodRatingForMovie(movie);
+    }
+
+    @Test(expected=NoMovieFoundException.class)
+    public void testNoMovieFoundException() throws NoMovieFoundException, TooManyMoviesFound, ServiceNotAvailableException {
+        Movie movie = new Movie();
+        movie.setTitle("ABCDEFGHIJKLM");
+        ratingService.laodRatingForMovie(movie);
+    }
+
+    // Remember to disconnect before running this test
+    @Test(expected=ServiceNotAvailableException.class)
+    public void testServiceNotAvailableException() throws NoMovieFoundException, TooManyMoviesFound, ServiceNotAvailableException {
+        Movie movie = new Movie();
+        movie.setTitle("Bambi");
+        ratingService.laodRatingForMovie(movie);
+    }
+
+    // Remember to check TMDb if the rating value has changed when this test fails
+    @Test
+    public void testRatingValueIsCorrect() throws NoMovieFoundException, TooManyMoviesFound, ServiceNotAvailableException {
+        Movie movie = new Movie();
+        movie.setTitle("Bambi");
+        movie.setYearPublished(Year.of(1942));
+        assertThat(ratingService.laodRatingForMovie(movie), is(3.2f));
+    }
+
+
+}
Index: resource/fxml/movieRental.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- resource/fxml/movieRental.fxml	(date 1432685042000)
+++ resource/fxml/movieRental.fxml	(date 1432685042000)
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.effect.*?>
+<?import javafx.geometry.*?>
+<?import javafx.scene.image.*?>
+<?import javafx.scene.text.*?>
+<?import javafx.scene.*?>
+<?import javafx.scene.control.*?>
+<?import java.lang.*?>
+<?import javafx.scene.layout.*?>
+
+<VBox prefHeight="768.0" prefWidth="1024.0" xmlns="http://javafx.com/javafx/8.0.40" xmlns:fx="http://javafx.com/fxml/1" fx:controller="at.ac.tuwien.qs.movierental.ui.controller.MovieRentalController">
+   <children>
+      <MenuBar>
+        <menus>
+          <Menu mnemonicParsing="false" text="Datei">
+            <items>
+              <MenuItem mnemonicParsing="false" onAction="#exitApplication" text="Beenden" />
+                  <MenuItem mnemonicParsing="false" onAction="#reinitDatabase" text="Datenbank zurücksetzen" />
+            </items>
+          </Menu>
+          <Menu mnemonicParsing="false" text="Hilfe">
+            <items>
+              <MenuItem mnemonicParsing="false" onAction="#showAbout" text="Über dieses Programm" />
+                  <MenuItem mnemonicParsing="false" onAction="#showLicense" text="Lizenzen" />
+            </items>
+          </Menu>
+        </menus>
+      </MenuBar>
+      <TabPane tabClosingPolicy="UNAVAILABLE" VBox.vgrow="ALWAYS">
+        <tabs>
+            <Tab fx:id="tabMovies" closable="false" text="Filmverwaltung">
+               <graphic>
+                  <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+                     <image>
+                        <Image url="@../images/movie.png" />
+                     </image>
+                  </ImageView>
+               </graphic>
+            </Tab>
+          <Tab fx:id="tabCustomers" closable="false" text="Kundenverwaltung">
+               <graphic>
+                  <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+                     <image>
+                        <Image url="@../images/users.png" />
+                     </image>
+                  </ImageView>
+               </graphic>
+          </Tab>
+          <Tab fx:id="tabRental" closable="false" text="Ausleihe / Rückgabe">
+               <graphic>
+                  <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+                     <image>
+                        <Image url="@../images/clock.png" />
+                     </image>
+                  </ImageView>
+               </graphic></Tab>
+        </tabs>
+      </TabPane>
+   </children>
+</VBox>
Index: .idea/artifacts/movierental.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/artifacts/movierental.xml	(date 1432685042000)
+++ .idea/artifacts/movierental.xml	(date 1432685042000)
@@ -0,0 +1,20 @@
+<component name="ArtifactManager">
+  <artifact type="javafx" name="movierental">
+    <output-path>$PROJECT_DIR$/out/artifacts/movierental</output-path>
+    <properties id="javafx-properties">
+      <options>
+        <option name="appClass" value="at.ac.tuwien.qs.movierental.app.App" />
+        <option name="description" value="" />
+        <option name="htmlParamFile" value="" />
+        <option name="paramFile" value="" />
+        <option name="title" value="" />
+        <option name="vendor" value="" />
+      </options>
+    </properties>
+    <root id="root">
+      <element id="archive" name="movierental.jar">
+        <element id="module-output" name="movierental" />
+      </element>
+    </root>
+  </artifact>
+</component>
\ No newline at end of file
Index: resource/fxml/movieManagement.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- resource/fxml/movieManagement.fxml	(date 1432685042000)
+++ resource/fxml/movieManagement.fxml	(date 1432685042000)
@@ -0,0 +1,190 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.*?>
+<?import javafx.scene.image.*?>
+<?import javafx.scene.text.*?>
+<?import java.lang.*?>
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+
+<VBox xmlns="http://javafx.com/javafx/8.0.40" xmlns:fx="http://javafx.com/fxml/1" fx:controller="at.ac.tuwien.qs.movierental.MovieManagementController">
+   <children>
+      <HBox>
+         <children>
+            <TextField fx:id="txtFilter" maxWidth="1.7976931348623157E308" promptText="Filter..." HBox.hgrow="ALWAYS">
+               <HBox.margin>
+                  <Insets right="5.0" />
+               </HBox.margin>
+            </TextField>
+            <ToggleButton fx:id="tglFilter" mnemonicParsing="false" onAction="#filter" text="Filter">
+               <graphic>
+                  <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+                     <image>
+                        <Image url="@../images/filter.png" />
+                     </image>
+                  </ImageView>
+               </graphic>
+            </ToggleButton>
+         </children>
+         <VBox.margin>
+            <Insets bottom="5.0" left="5.0" right="5.0" top="5.0" />
+         </VBox.margin>
+      </HBox>
+      <TableView fx:id="tblMovies" maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" tableMenuButtonVisible="true" VBox.vgrow="ALWAYS">
+         <columnResizePolicy>
+            <TableView fx:constant="CONSTRAINED_RESIZE_POLICY" />
+         </columnResizePolicy>
+         <columns>
+            <TableColumn fx:id="tcMovieID" maxWidth="110.0" minWidth="110.0" prefWidth="110.0" text="Filmnummer" />
+            <TableColumn fx:id="tcTitle" maxWidth="500.0" minWidth="110.0" prefWidth="125.0" text="Titel" />
+            <TableColumn fx:id="tcSubtitle" maxWidth="500.0" minWidth="110.0" prefWidth="125.0" text="Subtitel" visible="false" />
+            <TableColumn fx:id="tcGenre" maxWidth="150.0" minWidth="110.0" prefWidth="125.0" text="Genre" />
+            <TableColumn fx:id="tcAgeRating" maxWidth="110.0" minWidth="110.0" prefWidth="110.0" text="Altersfreigabe" />
+            <TableColumn fx:id="tcLanguage" maxWidth="150.0" minWidth="110.0" prefWidth="125.0" text="Sprache" />
+            <TableColumn fx:id="tcYearPublished" maxWidth="110.0" minWidth="110.0" prefWidth="110.0" text="Jahr" />
+            <TableColumn fx:id="tcPrice" maxWidth="500.0" minWidth="110.0" prefWidth="125.0" text="Leihgebühr" visible="false" />
+            <TableColumn fx:id="tcDirector" maxWidth="500.0" minWidth="110.0" prefWidth="125.0" text="Regie" visible="false" />
+            <TableColumn fx:id="tcRating" maxWidth="110.0" minWidth="110.0" prefWidth="110.0" text="Bewertung" />
+            <TableColumn fx:id="tcSeries" maxWidth="110.0" minWidth="110.0" prefWidth="110.0" text="Mehrteiler" visible="false" />
+            <TableColumn fx:id="tcStock" maxWidth="110.0" minWidth="110.0" prefWidth="110.0" text="Bestand" visible="false" />
+            <TableColumn fx:id="tcAvailable" maxWidth="110.0" minWidth="110.0" prefWidth="110.0" text="Verfügbar" />
+            <TableColumn fx:id="tcLent" maxWidth="110.0" minWidth="110.0" prefWidth="110.0" text="Verliehen" visible="false" />
+         </columns>
+      </TableView>
+      <GridPane>
+         <columnConstraints>
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="25.0" minWidth="25.0" prefWidth="25.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="125.0" minWidth="125.0" prefWidth="125.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="250.0" minWidth="150.0" prefWidth="250.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="25.0" minWidth="25.0" prefWidth="25.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="125.0" minWidth="125.0" prefWidth="125.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="250.0" minWidth="150.0" prefWidth="250.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="1.7976931348623157E308" minWidth="25.0" prefWidth="25.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="25.0" minWidth="25.0" prefWidth="25.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="150.0" minWidth="150.0" prefWidth="150.0" />
+         </columnConstraints>
+         <rowConstraints>
+            <RowConstraints maxHeight="30.0" minHeight="30.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints maxHeight="30.0" minHeight="30.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints maxHeight="30.0" minHeight="30.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints maxHeight="30.0" minHeight="30.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints maxHeight="30.0" minHeight="30.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints maxHeight="30.0" minHeight="30.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints maxHeight="30.0" minHeight="30.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints maxHeight="30.0" minHeight="30.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints />
+         </rowConstraints>
+         <children>
+            <Label text="Filmdaten" underline="true" GridPane.columnSpan="2">
+               <font>
+                  <Font name="System Bold" size="12.0" />
+               </font>
+            </Label>
+            <Label text="Filmnummer:" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+            <Label text="Titel:" GridPane.columnIndex="1" GridPane.rowIndex="2" />
+            <Label layoutX="45.0" layoutY="77.0" text="Genre:" GridPane.columnIndex="1" GridPane.rowIndex="3" />
+            <Label text="Sprache:" GridPane.columnIndex="1" GridPane.rowIndex="4" />
+            <Label layoutX="150.0" layoutY="102.0" text="Regie:" GridPane.columnIndex="1" GridPane.rowIndex="5" />
+            <Label text="Erscheinungsjahr:" GridPane.columnIndex="1" GridPane.rowIndex="6" />
+            <Label text="Gesamtbestand:" GridPane.columnIndex="1" GridPane.rowIndex="7" />
+            <Label layoutX="45.0" layoutY="77.0" text="Subtitel:" GridPane.columnIndex="4" GridPane.rowIndex="2" />
+            <Label layoutX="445.0" layoutY="137.0" text="Altersfreigabe:" GridPane.columnIndex="4" GridPane.rowIndex="3" />
+            <Label layoutX="45.0" layoutY="77.0" text="Leihgebühr in Cent:" GridPane.columnIndex="4" GridPane.rowIndex="4" />
+            <Label text="Bewertung:" GridPane.columnIndex="4" GridPane.rowIndex="5" />
+            <Label layoutX="445.0" layoutY="227.0" text="Mehrteiler:" GridPane.columnIndex="4" GridPane.rowIndex="6" />
+            <Label layoutX="445.0" layoutY="167.0" text="Verfügbar / Verliehen:" GridPane.columnIndex="4" GridPane.rowIndex="7" />
+            <Label layoutX="445.0" layoutY="20.0" text="Cover" underline="true" GridPane.columnIndex="7" GridPane.columnSpan="2">
+               <font>
+                  <Font name="System Bold" size="12.0" />
+               </font>
+            </Label>
+            <Label fx:id="lblMovieID" layoutX="30.0" layoutY="177.0" text="&lt;filmnummer&gt;" GridPane.columnIndex="2" GridPane.rowIndex="1" />
+            <TextField fx:id="txtTitle" layoutX="150.0" layoutY="58.0" promptText="Musterfilm" GridPane.columnIndex="2" GridPane.rowIndex="2" />
+            <ComboBox fx:id="cbxGenre" maxWidth="1.7976931348623157E308" promptText="Genre" GridPane.columnIndex="2" GridPane.rowIndex="3" />
+            <ComboBox fx:id="cbxLanguage" maxWidth="1.7976931348623157E308" promptText="Sprache" GridPane.columnIndex="2" GridPane.rowIndex="4" />
+            <TextField fx:id="txtDirector" layoutX="150.0" layoutY="58.0" promptText="Max Mustermann" GridPane.columnIndex="2" GridPane.rowIndex="5" />
+            <TextField fx:id="txtYearPublished" layoutX="150.0" layoutY="58.0" promptText="YYYY" GridPane.columnIndex="2" GridPane.rowIndex="6" />
+            <HBox alignment="CENTER_LEFT" spacing="5.0" GridPane.columnIndex="2" GridPane.rowIndex="7">
+               <children>
+                  <Label text="0" />
+                  <Slider fx:id="sliStock" blockIncrement="5.0" majorTickUnit="5.0" max="50.0" maxWidth="1.7976931348623157E308" minorTickCount="1" showTickMarks="true" snapToTicks="true" HBox.hgrow="ALWAYS" />
+                  <Label text="50" />
+                  <TextField fx:id="txtStock" prefColumnCount="3" text="0" />
+               </children>
+            </HBox>
+            <TextField fx:id="txtSubtitle" layoutX="170.0" layoutY="73.0" promptText="Subtitel" GridPane.columnIndex="5" GridPane.rowIndex="2" />
+            <ComboBox fx:id="cbxAgeRating" maxWidth="1.7976931348623157E308" promptText="Altersfreigabe" GridPane.columnIndex="5" GridPane.rowIndex="3" />
+            <TextField fx:id="txtPriceInCent" layoutX="570.0" layoutY="133.0" text="0" GridPane.columnIndex="5" GridPane.rowIndex="4" />
+            <HBox alignment="CENTER_LEFT" GridPane.columnIndex="5" GridPane.rowIndex="5">
+               <children>
+                  <TextField fx:id="txtRating" promptText="0.0 - 5.0" HBox.hgrow="ALWAYS">
+                     <HBox.margin>
+                        <Insets right="5.0" />
+                     </HBox.margin>
+                  </TextField>
+                  <Button maxWidth="1.7976931348623157E308" minWidth="110.0" mnemonicParsing="false" onAction="#loadFromService" prefWidth="110.0" text="von Service laden" />
+               </children>
+            </HBox>
+            <CheckBox fx:id="chkSeries" mnemonicParsing="false" GridPane.columnIndex="5" GridPane.rowIndex="6" />
+            <HBox alignment="CENTER_LEFT" GridPane.columnIndex="5" GridPane.rowIndex="7">
+               <children>
+                  <Label fx:id="lblAvailable" text="&lt;verfügbar&gt;" />
+                  <Label text="/" />
+                  <Label fx:id="lblLent" text="&lt;verliehen&gt;" />
+               </children>
+            </HBox>
+            <Button maxWidth="1.7976931348623157E308" mnemonicParsing="false" onAction="#selectCover" text="Cover auswählen" GridPane.columnIndex="8" GridPane.rowIndex="1">
+               <graphic>
+                  <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+                     <image>
+                        <Image url="@../images/picture.png" />
+                     </image>
+                  </ImageView>
+               </graphic>
+            </Button>
+            <ImageView fx:id="imgCover" fitWidth="150.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="8" GridPane.columnSpan="2147483647" GridPane.halignment="LEFT" GridPane.rowIndex="2" GridPane.rowSpan="2147483647" GridPane.valignment="TOP">
+               <GridPane.margin>
+                  <Insets top="5.0" />
+               </GridPane.margin>
+               <image>
+                  <Image url="@../images/cover.png" />
+               </image>
+            </ImageView>
+            <ButtonBar buttonMinWidth="100.0" GridPane.columnSpan="2147483647" GridPane.rowIndex="8">
+               <buttons>
+                  <Button layoutX="848.0" layoutY="18.0" mnemonicParsing="false" onAction="#reset" text="Neu">
+                     <graphic>
+                        <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+                           <image>
+                              <Image url="@../images/new.png" />
+                           </image>
+                        </ImageView>
+                     </graphic>
+                  </Button>
+                  <Button mnemonicParsing="false" onAction="#persist" text="Speichern">
+                     <graphic>
+                        <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+                           <image>
+                              <Image url="@../images/save.png" />
+                           </image>
+                        </ImageView>
+                     </graphic>
+                  </Button>
+                  <Button mnemonicParsing="false" onAction="#delete" text="Löschen">
+                     <graphic>
+                        <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+                           <image>
+                              <Image url="@../images/delete.png" />
+                           </image>
+                        </ImageView>
+                     </graphic>
+                  </Button>
+               </buttons>
+            </ButtonBar>
+         </children>
+         <padding>
+            <Insets bottom="10.0" left="10.0" right="10.0" top="10.0" />
+         </padding>
+      </GridPane>
+   </children>
+</VBox>
Index: .idea/artifacts/movierental_jar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/artifacts/movierental_jar.xml	(date 1432685042000)
+++ .idea/artifacts/movierental_jar.xml	(date 1432685042000)
@@ -0,0 +1,8 @@
+<component name="ArtifactManager">
+  <artifact type="jar" name="movierental:jar">
+    <output-path>$PROJECT_DIR$/out/artifacts/movierental_jar</output-path>
+    <root id="archive" name="movierental.jar">
+      <element id="module-output" name="movierental" />
+    </root>
+  </artifact>
+</component>
\ No newline at end of file
Index: .idea/copyright/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/copyright/profiles_settings.xml	(date 1432685042000)
+++ .idea/copyright/profiles_settings.xml	(date 1432685042000)
@@ -0,0 +1,3 @@
+<component name="CopyrightManager">
+  <settings default="" />
+</component>
\ No newline at end of file
Index: resource/fxml/customerManagement.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- resource/fxml/customerManagement.fxml	(date 1432685042000)
+++ resource/fxml/customerManagement.fxml	(date 1432685042000)
@@ -0,0 +1,161 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import java.lang.*?>
+<?import javafx.geometry.*?>
+<?import javafx.scene.control.*?>
+<?import javafx.scene.image.*?>
+<?import javafx.scene.layout.*?>
+<?import javafx.scene.text.*?>
+
+<VBox xmlns="http://javafx.com/javafx/8.0.40" xmlns:fx="http://javafx.com/fxml/1" fx:controller="at.ac.tuwien.qs.movierental.CustomerManagementController">
+   <children>
+      <HBox>
+         <children>
+            <TextField fx:id="txtFilter" maxWidth="1.7976931348623157E308" promptText="Filter..." HBox.hgrow="ALWAYS">
+               <HBox.margin>
+                  <Insets right="5.0" />
+               </HBox.margin>
+            </TextField>
+            <ToggleButton fx:id="tglFilter" mnemonicParsing="false" onAction="#filter" text="Filter">
+               <graphic>
+                  <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+                     <image>
+                        <Image url="@../images/filter.png" />
+                     </image>
+                  </ImageView>
+               </graphic>
+            </ToggleButton>
+         </children>
+         <VBox.margin>
+            <Insets bottom="5.0" left="5.0" right="5.0" top="5.0" />
+         </VBox.margin>
+      </HBox>
+      <TableView fx:id="tblCustomers" maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" tableMenuButtonVisible="true" VBox.vgrow="ALWAYS">
+         <columns>
+            <TableColumn fx:id="tcCustomerId" maxWidth="110.0" minWidth="110.0" prefWidth="110.0" text="Kundennummer" />
+            <TableColumn fx:id="tcFirstName" maxWidth="500.0" minWidth="110.0" prefWidth="125.0" text="Vorname" />
+            <TableColumn fx:id="tcLastName" maxWidth="500.0" minWidth="110.0" prefWidth="125.0" text="Nachname" />
+            <TableColumn fx:id="tcEmail" maxWidth="500.0" minWidth="110.0" prefWidth="125.0" text="Email" visible="false" />
+            <TableColumn fx:id="tcBirthday" maxWidth="110.0" minWidth="110.0" prefWidth="110.0" text="Geburtsdatum" />
+            <TableColumn fx:id="tcPhone" maxWidth="500.0" minWidth="110.0" prefWidth="125.0" text="Telefonnummer" visible="false" />
+            <TableColumn fx:id="tcZipCode" maxWidth="500.0" minWidth="110.0" prefWidth="125.0" text="Postleitzahl" visible="false" />
+            <TableColumn fx:id="tcPatron" maxWidth="110.0" minWidth="110.0" prefWidth="110.0" text="Stammkunde" />
+            <TableColumn fx:id="tcVideopoints" maxWidth="110.0" minWidth="110.0" prefWidth="110.0" text="Videopoints" />
+            <TableColumn fx:id="tcRent" maxWidth="110.0" minWidth="110.0" prefWidth="110.0" text="Ausgeliehen" />
+            <TableColumn fx:id="tcOverdue" maxWidth="110.0" minWidth="110.0" prefWidth="110.0" text="Überfällig" />
+         </columns>
+         <columnResizePolicy>
+            <TableView fx:constant="CONSTRAINED_RESIZE_POLICY" />
+         </columnResizePolicy>
+      </TableView>
+      <GridPane>
+         <columnConstraints>
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="25.0" minWidth="25.0" prefWidth="25.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="125.0" minWidth="125.0" prefWidth="125.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="250.0" minWidth="150.0" prefWidth="250.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="25.0" minWidth="25.0" prefWidth="25.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="125.0" minWidth="125.0" prefWidth="125.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="250.0" minWidth="150.0" prefWidth="250.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="1.7976931348623157E308" minWidth="25.0" prefWidth="25.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="25.0" minWidth="25.0" prefWidth="25.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="150.0" minWidth="150.0" prefWidth="150.0" />
+         </columnConstraints>
+         <rowConstraints>
+            <RowConstraints maxHeight="30.0" minHeight="30.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints maxHeight="30.0" minHeight="30.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints maxHeight="30.0" minHeight="30.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints maxHeight="30.0" minHeight="30.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints maxHeight="30.0" minHeight="30.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints maxHeight="30.0" minHeight="30.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints maxHeight="30.0" minHeight="30.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints maxHeight="30.0" minHeight="30.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints />
+         </rowConstraints>
+         <children>
+            <Label text="Kundendaten" underline="true" GridPane.columnSpan="2">
+               <font>
+                  <Font name="System Bold" size="12.0" />
+               </font>
+            </Label>
+            <Label text="Kundennummer:" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+            <Label text="Vorname:" GridPane.columnIndex="1" GridPane.rowIndex="2" />
+            <Label text="Nachname:" GridPane.columnIndex="1" GridPane.rowIndex="3" />
+            <Label text="Email:" GridPane.columnIndex="1" GridPane.rowIndex="4" />
+            <Label layoutX="150.0" layoutY="102.0" text="Telefonnummer:" GridPane.columnIndex="1" GridPane.rowIndex="5" />
+            <Label text="Geburtsdatum:" GridPane.columnIndex="1" GridPane.rowIndex="6" />
+            <Label text="Stammkunde:" GridPane.columnIndex="1" GridPane.rowIndex="7" />
+            <Label text="Adresse:" GridPane.columnIndex="4" GridPane.rowIndex="2" />
+            <Label text="Postleitzahl:" GridPane.columnIndex="4" GridPane.rowIndex="5" />
+            <Label text="Wohnort:" GridPane.columnIndex="4" GridPane.rowIndex="6" />
+            <Label text="Aktuelle Videopoints:" GridPane.columnIndex="4" GridPane.rowIndex="7" />
+            <Label layoutX="445.0" layoutY="20.0" text="Foto" underline="true" GridPane.columnIndex="7" GridPane.columnSpan="2">
+               <font>
+                  <Font name="System Bold" size="12.0" />
+               </font>
+            </Label>
+            <Label fx:id="lblCustomerID" layoutX="30.0" layoutY="177.0" text="&lt;kundennummer&gt;" GridPane.columnIndex="2" GridPane.rowIndex="1" />
+            <TextField fx:id="txtFirstName" layoutX="150.0" layoutY="58.0" promptText="Max" GridPane.columnIndex="2" GridPane.rowIndex="2" />
+            <TextField fx:id="txtLastName" promptText="Mustermann" GridPane.columnIndex="2" GridPane.rowIndex="3" />
+            <TextField fx:id="txtEmail" layoutX="150.0" layoutY="58.0" promptText="vorname.nachname@domain.tld" GridPane.columnIndex="2" GridPane.rowIndex="4" />
+            <TextField fx:id="txtPhone" layoutX="150.0" layoutY="58.0" promptText="+43 123 4556 789" GridPane.columnIndex="2" GridPane.rowIndex="5" />
+            <TextField fx:id="txtBirthday" promptText="TT. MM. YYYY" GridPane.columnIndex="2" GridPane.rowIndex="6" />
+            <CheckBox fx:id="chkPatron" mnemonicParsing="false" GridPane.columnIndex="2" GridPane.rowIndex="7" />
+            <TextArea fx:id="txtAddress" maxHeight="1.7976931348623157E308" promptText="Straße 1/2/3" wrapText="true" GridPane.columnIndex="5" GridPane.rowIndex="2" GridPane.rowSpan="3" />
+            <TextField fx:id="txtZipCode" promptText="0000" GridPane.columnIndex="5" GridPane.rowIndex="5" />
+            <TextField fx:id="txtCity" promptText="Stadt" GridPane.columnIndex="5" GridPane.rowIndex="6" />
+            <Label fx:id="lblVideopoints" text="&lt;videopoints&gt;" GridPane.columnIndex="5" GridPane.rowIndex="7" />
+            <Button maxWidth="1.7976931348623157E308" mnemonicParsing="false" onAction="#selectPhoto" text="Foto auswählen" GridPane.columnIndex="8" GridPane.rowIndex="1">
+               <graphic>
+                  <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+                     <image>
+                        <Image url="@../images/picture.png" />
+                     </image>
+                  </ImageView>
+               </graphic>
+            </Button>
+            <ImageView fx:id="imgPhoto" fitWidth="150.0" pickOnBounds="true" preserveRatio="true" GridPane.columnIndex="8" GridPane.columnSpan="2147483647" GridPane.halignment="LEFT" GridPane.rowIndex="2" GridPane.rowSpan="2147483647" GridPane.valignment="TOP">
+               <GridPane.margin>
+                  <Insets top="5.0" />
+               </GridPane.margin>
+               <image>
+                  <Image url="@../images/user.png" />
+               </image>
+            </ImageView>
+            <ButtonBar buttonMinWidth="100.0" GridPane.columnSpan="2147483647" GridPane.rowIndex="8" GridPane.rowSpan="2147483647">
+               <buttons>
+                  <Button layoutX="848.0" layoutY="18.0" mnemonicParsing="false" onAction="#reset" text="Neu">
+                     <graphic>
+                        <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+                           <image>
+                              <Image url="@../images/new.png" />
+                           </image>
+                        </ImageView>
+                     </graphic>
+                  </Button>
+                  <Button mnemonicParsing="false" onAction="#persist" text="Speichern">
+                     <graphic>
+                        <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+                           <image>
+                              <Image url="@../images/save.png" />
+                           </image>
+                        </ImageView>
+                     </graphic>
+                  </Button>
+                  <Button mnemonicParsing="false" onAction="#delete" text="Löschen">
+                     <graphic>
+                        <ImageView fitHeight="15.0" fitWidth="15.0" pickOnBounds="true" preserveRatio="true">
+                           <image>
+                              <Image url="@../images/delete.png" />
+                           </image>
+                        </ImageView>
+                     </graphic>
+                  </Button>
+               </buttons>
+            </ButtonBar>
+         </children>
+         <padding>
+            <Insets bottom="10.0" left="10.0" right="10.0" top="10.0" />
+         </padding>
+      </GridPane>
+   </children>
+</VBox>
Index: src/at/ac/tuwien/qs/movierental/DAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/DAO.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/DAO.java	(date 1432685042000)
@@ -0,0 +1,17 @@
+package at.ac.tuwien.qs.movierental;
+
+import java.util.List;
+
+public interface DAO<ENTITY> {
+
+    ENTITY create(ENTITY entity);
+
+    ENTITY read(Long id);
+
+    List<ENTITY> read();
+
+    ENTITY update(ENTITY entity);
+
+    void delete(ENTITY entity);
+
+}
Index: src/at/ac/tuwien/qs/movierental/Movie.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/Movie.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/Movie.java	(date 1432685042000)
@@ -0,0 +1,215 @@
+package at.ac.tuwien.qs.movierental;
+
+import javafx.beans.property.ObjectProperty;
+import javafx.beans.property.SimpleObjectProperty;
+
+import java.io.File;
+import java.time.Year;
+
+public class Movie {
+
+    private ObjectProperty<Long> id = new SimpleObjectProperty<>(null);
+    private ObjectProperty<String> title = new SimpleObjectProperty<>(null);
+    private ObjectProperty<String> subtitle = new SimpleObjectProperty<>(null);
+    private ObjectProperty<String> genre = new SimpleObjectProperty<>(null);
+    private ObjectProperty<String> ageRating = new SimpleObjectProperty<>(null);
+    private ObjectProperty<String> language = new SimpleObjectProperty<>(null);
+    private ObjectProperty<Integer> priceInCents = new SimpleObjectProperty<>(null);
+    private ObjectProperty<String> director = new SimpleObjectProperty<>(null);
+    private ObjectProperty<Float> rating = new SimpleObjectProperty<>(null);
+    private ObjectProperty<Year> yearPublished = new SimpleObjectProperty<>(null);
+    private ObjectProperty<Boolean> series = new SimpleObjectProperty<>(false);
+    private ObjectProperty<Integer> stock = new SimpleObjectProperty<>(0);
+    private ObjectProperty<File> cover = new SimpleObjectProperty<>(null);
+
+    public Long getId() {
+        return id.get();
+    }
+
+    public ObjectProperty<Long> idProperty() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id.set(id);
+    }
+
+    public String getTitle() {
+        return title.get();
+    }
+
+    public ObjectProperty<String> titleProperty() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title.set(title);
+    }
+
+    public String getSubtitle() {
+        return subtitle.get();
+    }
+
+    public ObjectProperty<String> subtitleProperty() {
+        return subtitle;
+    }
+
+    public void setSubtitle(String subtitle) {
+        this.subtitle.set(subtitle);
+    }
+
+    public String getGenre() {
+        return genre.get();
+    }
+
+    public ObjectProperty<String> genreProperty() {
+        return genre;
+    }
+
+    public void setGenre(String genre) {
+        this.genre.set(genre);
+    }
+
+    public String getAgeRating() {
+        return ageRating.get();
+    }
+
+    public ObjectProperty<String> ageRatingProperty() {
+        return ageRating;
+    }
+
+    public void setAgeRating(String ageRating) {
+        this.ageRating.set(ageRating);
+    }
+
+    public String getLanguage() {
+        return language.get();
+    }
+
+    public ObjectProperty<String> languageProperty() {
+        return language;
+    }
+
+    public void setLanguage(String language) {
+        this.language.set(language);
+    }
+
+    public Integer getPriceInCents() {
+        return priceInCents.get();
+    }
+
+    public ObjectProperty<Integer> priceInCentsProperty() {
+        return priceInCents;
+    }
+
+    public void setPriceInCents(Integer priceInCents) {
+        this.priceInCents.set(priceInCents);
+    }
+
+    public String getDirector() {
+        return director.get();
+    }
+
+    public ObjectProperty<String> directorProperty() {
+        return director;
+    }
+
+    public void setDirector(String director) {
+        this.director.set(director);
+    }
+
+    public Float getRating() {
+        return rating.get();
+    }
+
+    public ObjectProperty<Float> ratingProperty() {
+        return rating;
+    }
+
+    public void setRating(Float rating) {
+        this.rating.set(rating);
+    }
+
+    public Year getYearPublished() {
+        return yearPublished.get();
+    }
+
+    public ObjectProperty<Year> yearPublishedProperty() {
+        return yearPublished;
+    }
+
+    public void setYearPublished(Year yearPublished) {
+        this.yearPublished.set(yearPublished);
+    }
+
+    public Boolean getSeries() {
+        return series.get();
+    }
+
+    public ObjectProperty<Boolean> seriesProperty() {
+        return series;
+    }
+
+    public void setSeries(Boolean series) {
+        this.series.set(series);
+    }
+
+    public Integer getStock() {
+        return stock.get();
+    }
+
+    public ObjectProperty<Integer> stockProperty() {
+        return stock;
+    }
+
+    public void setStock(Integer stock) {
+        this.stock.set(stock);
+    }
+
+    public File getCover() {
+        return cover.get();
+    }
+
+    public ObjectProperty<File> coverProperty() {
+        return cover;
+    }
+
+    public void setCover(File cover) {
+        this.cover.set(cover);
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        Movie movie = (Movie) o;
+
+        return !(id != null ? !id.equals(movie.id) : movie.id != null);
+
+    }
+
+    @Override
+    public int hashCode() {
+        return id != null ? id.hashCode() : 0;
+    }
+
+    @Override
+    public String toString() {
+        return "Movie{" +
+                "id=" + id +
+                ", title=" + title +
+                ", subtitle=" + subtitle +
+                ", genre=" + genre +
+                ", ageRating=" + ageRating +
+                ", language=" + language +
+                ", priceInCents=" + priceInCents +
+                ", director=" + director +
+                ", rating=" + rating +
+                ", yearPublished=" + yearPublished +
+                ", series=" + series +
+                ", stock=" + stock +
+                ", cover=" + cover +
+                '}';
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/Rental.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/Rental.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/Rental.java	(date 1432685042000)
@@ -0,0 +1,70 @@
+package at.ac.tuwien.qs.movierental;
+
+import javafx.beans.property.ObjectProperty;
+import javafx.beans.property.SimpleObjectProperty;
+
+import java.time.LocalDate;
+
+public class Rental {
+
+    private ObjectProperty<Long> id = new SimpleObjectProperty<>(null);
+    private ObjectProperty<LocalDate> dateLent = new SimpleObjectProperty<>(null);
+    private Movie movie;
+    private Customer customer;
+
+    public Long getId() {
+        return id.get();
+    }
+
+    public ObjectProperty<Long> idProperty() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id.set(id);
+    }
+
+    public LocalDate getDateLent() {
+        return dateLent.get();
+    }
+
+    public ObjectProperty<LocalDate> dateLentProperty() {
+        return dateLent;
+    }
+
+    public void setDateLent(LocalDate dateLent) {
+        this.dateLent.set(dateLent);
+    }
+
+    public Movie getMovie() {
+        return movie;
+    }
+
+    public void setMovie(Movie movie) {
+        this.movie = movie;
+    }
+
+    public Customer getCustomer() {
+        return customer;
+    }
+
+    public void setCustomer(Customer customer) {
+        this.customer = customer;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        Rental rental = (Rental) o;
+
+        return !(id != null ? !id.equals(rental.id) : rental.id != null);
+
+    }
+
+    @Override
+    public int hashCode() {
+        return id != null ? id.hashCode() : 0;
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/app/App.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/app/App.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/app/App.java	(date 1432685042000)
@@ -0,0 +1,99 @@
+package at.ac.tuwien.qs.movierental.app;
+
+import at.ac.tuwien.qs.movierental.*;
+import at.ac.tuwien.qs.movierental.DummyCustomerDAO;
+import at.ac.tuwien.qs.movierental.DummyMovieDAO;
+import at.ac.tuwien.qs.movierental.DummyRentalDAO;
+import at.ac.tuwien.qs.movierental.Customer;
+import at.ac.tuwien.qs.movierental.Movie;
+import at.ac.tuwien.qs.movierental.CustomerManagementController;
+import at.ac.tuwien.qs.movierental.MovieManagementController;
+import at.ac.tuwien.qs.movierental.ui.controller.MovieRentalController;
+import at.ac.tuwien.qs.movierental.RentalController;
+import javafx.application.Application;
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.scene.image.Image;
+import javafx.stage.Stage;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class App extends Application {
+
+    private static final Logger LOGGER = LoggerFactory.getLogger(App.class);
+
+    private MovieRentalController movieRentalController;
+    private ObservableList<Movie> movies;
+    private ObservableList<Customer> customers;
+    private DummyMovieDAO movieDAO;
+    private DummyCustomerDAO customerDAO;
+    private DummyRentalDAO rentalDAO;
+
+    @Override
+    public void start(Stage primaryStage) throws Exception {
+        LOGGER.info("Videorental application started");
+        primaryStage.setTitle("Filmverleih");
+        primaryStage.getIcons().add(new Image(this.getClass().getResourceAsStream("/images/rent.png")));
+
+        movieDAO = new DummyMovieDAO();
+        movies = FXCollections.observableArrayList(movieDAO.read());
+        customerDAO = new DummyCustomerDAO();
+        customers = FXCollections.observableArrayList(customerDAO.read());
+        rentalDAO = new DummyRentalDAO(movieDAO, customerDAO);
+
+        FXMLLoader fxmlLoader = new FXMLLoader();
+        fxmlLoader.setLocation(this.getClass().getResource("/fxml/movieRental.fxml"));
+        Parent root = fxmlLoader.load();
+
+        this.movieRentalController = fxmlLoader.getController();
+        this.movieRentalController.setPrimaryStage(primaryStage);
+        setupMovieManagement();
+        setupCustomerManagement();
+        setupRental();
+
+        primaryStage.setScene(new Scene(root, 1024, 768));
+        primaryStage.show();
+    }
+
+    private void setupMovieManagement() throws java.io.IOException {
+        LOGGER.info("setup MovieManagement");
+        MovieDataService movieDataService = new TheMovieDbMovieDataService();
+        RatingService ratingService = new SimpleRatingService(movieDataService);
+
+        FXMLLoader fxmlLoader = new FXMLLoader(this.getClass().getResource("/fxml/movieManagement.fxml"));
+        this.movieRentalController.setMoviesTabContent(fxmlLoader.load());
+        MovieManagementController movieManagementController = fxmlLoader.getController();
+        movieManagementController.setMovies(this.movies);
+        movieManagementController.setMovieDAO(this.movieDAO);
+        movieManagementController.setRatingService(ratingService);
+    }
+
+    private void setupCustomerManagement() throws java.io.IOException {
+        LOGGER.info("setup CustomerManagement");
+        FXMLLoader fxmlLoader = new FXMLLoader(this.getClass().getResource("/fxml/customerManagement.fxml"));
+        this.movieRentalController.setCustomersTabContent(fxmlLoader.load());
+        CustomerManagementController customerManagementController = fxmlLoader.getController();
+        customerManagementController.setCustomers(this.customers);
+        customerManagementController.setCustomerDAO(this.customerDAO);
+    }
+
+    private void setupRental() throws java.io.IOException {
+        LOGGER.info("setup Rentals");
+        InvoiceService invoiceService = new SimpleInvoiceService();
+
+        FXMLLoader fxmlLoader = new FXMLLoader(this.getClass().getResource("/fxml/rental.fxml"));
+        this.movieRentalController.setRentalTabContent(fxmlLoader.load());
+        RentalController rentalController = fxmlLoader.getController();
+        rentalController.setMovies(this.movies);
+        rentalController.setCustomers(this.customers);
+        rentalController.setRentalDAO(this.rentalDAO);
+        rentalController.setInvoiceService(invoiceService);
+    }
+
+    public static void main(String[] args) {
+        launch(args);
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/Customer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/Customer.java	(date 1483360224000)
+++ src/at/ac/tuwien/qs/movierental/Customer.java	(date 1483360224000)
@@ -0,0 +1,253 @@
+package at.ac.tuwien.qs.movierental;
+
+import javafx.beans.property.ObjectProperty;
+import javafx.beans.property.SimpleObjectProperty;
+
+import java.io.File;
+import java.time.LocalDate;
+import java.time.temporal.ChronoUnit;
+
+public class Customer {
+
+    private ObjectProperty<Long> id = new SimpleObjectProperty<>(null);
+    private ObjectProperty<String> firstName = new SimpleObjectProperty<>(null);
+    private ObjectProperty<String> lastName = new SimpleObjectProperty<>(null);
+    private ObjectProperty<String> email = new SimpleObjectProperty<>(null);
+    private ObjectProperty<String> phone = new SimpleObjectProperty<>(null);
+    private ObjectProperty<LocalDate> birthday = new SimpleObjectProperty<>(null);
+    private ObjectProperty<String> address = new SimpleObjectProperty<>(null);
+    private ObjectProperty<String> zipCode = new SimpleObjectProperty<>(null);
+    private ObjectProperty<String> city = new SimpleObjectProperty<>(null);
+    private ObjectProperty<Boolean> patron = new SimpleObjectProperty<>(false);
+    private ObjectProperty<Integer> videopoints = new SimpleObjectProperty<>(0);
+    private ObjectProperty<File> photo = new SimpleObjectProperty<>(null);
+
+    public Long getId() {
+        return id.get();
+    }
+
+    public ObjectProperty<Long> idProperty() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id.set(id);
+    }
+
+    public String getFirstName() {
+        return firstName.get();
+    }
+
+    public ObjectProperty<String> firstNameProperty() {
+        return firstName;
+    }
+
+    public void setFirstName(String firstName) {
+        this.firstName.set(firstName);
+    }
+
+    public String getLastName() {
+        return lastName.get();
+    }
+
+    public ObjectProperty<String> lastNameProperty() {
+        return lastName;
+    }
+
+    public void setLastName(String lastName) {
+        this.lastName.set(lastName);
+    }
+
+    public String getEmail() {
+        return email.get();
+    }
+
+    public ObjectProperty<String> emailProperty() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email.set(email);
+    }
+
+    public String getPhone() {
+        return phone.get();
+    }
+
+    public ObjectProperty<String> phoneProperty() {
+        return phone;
+    }
+
+    public void setPhone(String phone) {
+        this.phone.set(phone);
+    }
+
+    public LocalDate getBirthday() {
+        return birthday.get();
+    }
+
+    public ObjectProperty<LocalDate> birthdayProperty() {
+        return birthday;
+    }
+
+    public void setBirthday(LocalDate birthday) {
+        this.birthday.set(birthday);
+    }
+
+    public String getAddress() {
+        return address.get();
+    }
+
+    public ObjectProperty<String> addressProperty() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address.set(address);
+    }
+
+    public String getZipCode() {
+        return zipCode.get();
+    }
+
+    public ObjectProperty<String> zipCodeProperty() {
+        return zipCode;
+    }
+
+    public void setZipCode(String zipCode) {
+        this.zipCode.set(zipCode);
+    }
+
+    public String getCity() {
+        return city.get();
+    }
+
+    public ObjectProperty<String> cityProperty() {
+        return city;
+    }
+
+    public void setCity(String city) {
+        this.city.set(city);
+    }
+
+    public Boolean getPatron() {
+        return patron.get();
+    }
+
+    public ObjectProperty<Boolean> patronProperty() {
+        return patron;
+    }
+
+    public void setPatron(boolean patron) {
+        this.patron.set(patron);
+    }
+
+    public Integer getVideopoints() {
+        return videopoints.get();
+    }
+
+    public ObjectProperty<Integer> videopointsProperty() {
+        return videopoints;
+    }
+
+    public void setVideopoints(int videopoints) {
+        this.videopoints.set(videopoints);
+    }
+
+    public File getPhoto() {
+        return photo.get();
+    }
+
+    public ObjectProperty<File> photoProperty() {
+        return photo;
+    }
+
+    public void setPhoto(File photo) {
+        this.photo.set(photo);
+    }
+
+    @Override
+    public String toString() {
+        return "Customer{" +
+                "id=" + id +
+                ", firstName=" + firstName +
+                ", lastName=" + lastName +
+                ", videopoints=" + videopoints +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        Customer customer = (Customer) o;
+
+        return !(id != null ? !id.equals(customer.id) : customer.id != null);
+
+    }
+
+    @Override
+    public int hashCode() {
+        return id != null ? id.hashCode() : 0;
+    }
+
+    public static int calculateVideopointsGain(long priceInCent, boolean patron) {
+        int videopoints = 0;
+        if (patron) {
+            videopoints++;
+        }
+        long euro = priceInCent / 100;
+        videopoints += euro / 2;
+        return videopoints;
+    }
+
+    /**
+     * FingBugs
+     * hier wurde ein float mit einem int addiert ..
+     * kann zu fehlern führen desswegen--> beide float
+     *
+     */
+    public float calculateDiscount() {
+        float discount = 0;
+        if (this.getPatron()) {
+            discount += 1.5;
+        }
+        if (this.getVideopoints() > 10) {
+            discount += 2.0;
+        } else if (this.getVideopoints() > 20) {
+            discount += 5.0;
+        }
+        return discount;
+    }
+
+    public static long calculatePriceForRental(Rental rental, LocalDate returnDate) {
+        long totalPrice = 0;
+        float factor = 1f;
+        switch (rental.getMovie().getGenre()) {
+            case "Normal":
+                factor = 1f;
+                break;
+            case "Kinder":
+                factor = 0.75f;
+                break;
+            case "Klassiker":
+                factor = 0.9f;
+                break;
+            case "Horror":
+                factor = 1.1f;
+                break;
+            case "SciFi":
+                factor = 1.15f;
+                break;
+            case "Fantasy":
+                factor = 1.25f;
+                break;
+        }
+        long days = ChronoUnit.DAYS.between(rental.getDateLent(), returnDate) + 1;
+        long priceInCents = rental.getMovie().getPriceInCents();
+        return (long) (priceInCents * days * factor);
+    }
+
+}
+
Index: src/at/ac/tuwien/qs/movierental/MovieDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/MovieDAO.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/MovieDAO.java	(date 1432685042000)
@@ -0,0 +1,4 @@
+package at.ac.tuwien.qs.movierental;
+
+public interface MovieDAO extends DAO<Movie>{
+}
Index: src/at/ac/tuwien/qs/movierental/RentalDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/RentalDAO.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/RentalDAO.java	(date 1432685042000)
@@ -0,0 +1,8 @@
+package at.ac.tuwien.qs.movierental;
+
+import java.util.List;
+
+public interface RentalDAO extends DAO<Rental>{
+
+    List<Rental> readByCustomer(Customer customer);
+}
Index: src/at/ac/tuwien/qs/movierental/TMDbMovie.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/TMDbMovie.java	(date 1483360744000)
+++ src/at/ac/tuwien/qs/movierental/TMDbMovie.java	(date 1483360744000)
@@ -0,0 +1,41 @@
+package at.ac.tuwien.qs.movierental;
+
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+import java.util.Date;
+
+@JsonIgnoreProperties(ignoreUnknown = true)
+public class TMDbMovie {
+
+    /**
+     * CheckStyle
+     * originalTitel muss private sein
+     */
+    @JsonProperty("original_title")
+    private String originalTitle;
+    /**
+     * CheckStyle
+     * popularity muss private sein
+     */
+    @JsonProperty("popularity")
+    private Float popularity;
+    /** CheckStyle
+     * voteAverage muss private sein
+     */
+    @JsonProperty("vote_average")
+    private Float voteAverage;
+    /**
+     * CheckStyle
+     * voteCount muss private sein
+     */
+    @JsonProperty("vote_count")
+    private Integer voteCount;
+    /**
+     * CheckStyle
+     * releaseDate muss private sein
+     */
+    @JsonProperty("release_date")
+    private Date releaseDate;
+
+}
\ No newline at end of file
Index: src/at/ac/tuwien/qs/movierental/TMDbResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/TMDbResult.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/TMDbResult.java	(date 1432685042000)
@@ -0,0 +1,17 @@
+package at.ac.tuwien.qs.movierental;
+
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+import java.util.ArrayList;
+
+@JsonIgnoreProperties(ignoreUnknown = true)
+public class TMDbResult {
+
+    @JsonProperty("results")
+    public ArrayList<TMDbMovie> movies;
+
+    @JsonProperty("total_results")
+    public Integer totalResults;
+
+}
\ No newline at end of file
Index: src/at/ac/tuwien/qs/movierental/CustomerDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/CustomerDAO.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/CustomerDAO.java	(date 1432685042000)
@@ -0,0 +1,4 @@
+package at.ac.tuwien.qs.movierental;
+
+public interface CustomerDAO extends DAO<Customer>{
+}
Index: src/at/ac/tuwien/qs/movierental/DummyMovieDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/DummyMovieDAO.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/DummyMovieDAO.java	(date 1432685042000)
@@ -0,0 +1,137 @@
+package at.ac.tuwien.qs.movierental;
+
+import java.time.Year;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.concurrent.atomic.AtomicLong;
+
+public class DummyMovieDAO implements MovieDAO {
+    private AtomicLong atomicLong = new AtomicLong(0);
+
+    public DummyMovieDAO() {
+        Movie movie;
+        {
+            movie = new Movie();
+            movie.setId(atomicLong.addAndGet(1));
+            movie.setTitle("Der Herr der Ringe");
+            movie.setSubtitle("Die Gefährten");
+            movie.setGenre("Fantasy");
+            movie.setAgeRating("FSK 12");
+            movie.setLanguage("German");
+            movie.setPriceInCents(300);
+            movie.setDirector("Peter Jackson");
+            movie.setRating(4.9F);
+            movie.setYearPublished(Year.of(2001));
+            movie.setSeries(true);
+            movie.setStock(10);
+            movie.setCover(null);
+            movies.add(movie);
+        }
+        {
+            movie = new Movie();
+            movie.setId(atomicLong.addAndGet(1));
+            movie.setTitle("Der Herr der Ringe");
+            movie.setSubtitle("Die zwei Türme");
+            movie.setGenre("Fantasy");
+            movie.setAgeRating("FSK 12");
+            movie.setLanguage("German");
+            movie.setPriceInCents(400);
+            movie.setDirector("Peter Jackson");
+            movie.setRating(4.6F);
+            movie.setYearPublished(Year.of(2002));
+            movie.setSeries(true);
+            movie.setStock(8);
+            movie.setCover(null);
+            movies.add(movie);
+        }
+        {
+            movie = new Movie();
+            movie.setId(atomicLong.addAndGet(1));
+            movie.setTitle("Der Herr der Ringe");
+            movie.setSubtitle("Die Rückkehr des Königs");
+            movie.setGenre("Fantasy");
+            movie.setAgeRating("FSK 12");
+            movie.setLanguage("German");
+            movie.setPriceInCents(500);
+            movie.setDirector("Peter Jackson");
+            movie.setRating(4.0F);
+            movie.setYearPublished(Year.of(2003));
+            movie.setSeries(true);
+            movie.setStock(5);
+            movie.setCover(null);
+            movies.add(movie);
+        }
+        {
+            movie = new Movie();
+            movie.setId(atomicLong.addAndGet(1));
+            movie.setTitle("The Ring");
+            movie.setSubtitle("");
+            movie.setGenre("Horror");
+            movie.setAgeRating("FSK 16");
+            movie.setLanguage("English");
+            movie.setPriceInCents(200);
+            movie.setDirector("Gore Verbinski");
+            movie.setRating(3.2F);
+            movie.setYearPublished(Year.of(2002));
+            movie.setSeries(false);
+            movie.setStock(3);
+            movie.setCover(null);
+            movies.add(movie);
+        }
+        {
+            movie = new Movie();
+            movie.setId(atomicLong.addAndGet(1));
+            movie.setTitle("Der Lorax");
+            movie.setSubtitle("");
+            movie.setGenre("Kinder");
+            movie.setAgeRating("FSK 0");
+            movie.setLanguage("German");
+            movie.setPriceInCents(120);
+            movie.setDirector("Chris Renaud");
+            movie.setRating(3.0F);
+            movie.setYearPublished(Year.of(2012));
+            movie.setSeries(false);
+            movie.setStock(8);
+            movie.setCover(null);
+            movies.add(movie);
+        }
+    }
+
+    private HashSet<Movie> movies = new HashSet<>();
+
+    @Override
+    public Movie create(Movie movie) {
+        movie.setId(atomicLong.addAndGet(1));
+        movies.add(movie);
+        return movie;
+    }
+
+    @Override
+    public Movie read(Long id) {
+        for (Movie movie : movies) {
+            if (movie.getId() == id) {
+                return movie;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public List<Movie> read() {
+        ArrayList<Movie> m = new ArrayList<>(this.movies);
+        m.sort((o1, o2) -> o1.getId().compareTo(o2.getId()));
+        return m;
+    }
+
+    @Override
+    public Movie update(Movie movie) {
+        this.movies.add(movie);
+        return movie;
+    }
+
+    @Override
+    public void delete(Movie movie) {
+        this.movies.remove(movie);
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/RatingService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/RatingService.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/RatingService.java	(date 1432685042000)
@@ -0,0 +1,16 @@
+package at.ac.tuwien.qs.movierental;
+
+public interface RatingService {
+
+    /**
+     * Look up the rating for a movie in a service.
+     *
+     * @param movie which should be looked up in the database
+     * @return the rating for the movie between 0 an 5
+     * @throws TooManyMoviesFound           if more than one matching movie is found
+     * @throws NoMovieFoundException        if no matching movies are found
+     * @throws ServiceNotAvailableException if the underlying service is not available or malfunctioning
+     */
+    Float laodRatingForMovie(Movie movie) throws TooManyMoviesFound, NoMovieFoundException, ServiceNotAvailableException;
+
+}
Index: src/at/ac/tuwien/qs/movierental/DummyRentalDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/DummyRentalDAO.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/DummyRentalDAO.java	(date 1432685042000)
@@ -0,0 +1,98 @@
+package at.ac.tuwien.qs.movierental;
+
+import java.time.LocalDate;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.concurrent.atomic.AtomicLong;
+
+public class DummyRentalDAO implements RentalDAO {
+    private AtomicLong atomicLong = new AtomicLong(0);
+
+    public DummyRentalDAO(MovieDAO movieDAO, CustomerDAO customerDAO) {
+        Rental rental;
+        {
+            rental = new Rental();
+            rental.setId(atomicLong.addAndGet(1));
+            rental.setDateLent(LocalDate.now().minusDays(1));
+            rental.setCustomer(customerDAO.read(1L));
+            rental.setMovie(movieDAO.read(4L));
+            rentals.add(rental);
+        }
+        {
+            rental = new Rental();
+            rental.setId(atomicLong.addAndGet(1));
+            rental.setDateLent(LocalDate.now().minusDays(5));
+            rental.setCustomer(customerDAO.read(4L));
+            rental.setMovie(movieDAO.read(1L));
+            rentals.add(rental);
+        }
+        {
+            rental = new Rental();
+            rental.setId(atomicLong.addAndGet(1));
+            rental.setDateLent(LocalDate.now().minusDays(3));
+            rental.setCustomer(customerDAO.read(1L));
+            rental.setMovie(movieDAO.read(2L));
+            rentals.add(rental);
+        }
+        {
+            rental = new Rental();
+            rental.setId(atomicLong.addAndGet(1));
+            rental.setDateLent(LocalDate.now().minusDays(14));
+            rental.setCustomer(customerDAO.read(2L));
+            rental.setMovie(movieDAO.read(5L));
+            rentals.add(rental);
+        }
+    }
+
+    private HashSet<Rental> rentals = new HashSet<>();
+
+    @Override
+    public Rental create(Rental rental) {
+        rental.setId(atomicLong.addAndGet(1));
+        rentals.add(rental);
+        return rental;
+    }
+
+    @Override
+    public Rental read(Long id) {
+        for (Rental rental : rentals) {
+            if (rental.getId() == id) {
+                return rental;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public List<Rental> read() {
+        ArrayList<Rental> r = new ArrayList<>(this.rentals);
+        r.sort((o1, o2) -> o1.getId().compareTo(o2.getId()));
+        return r;
+    }
+
+    @Override
+    public Rental update(Rental rental) {
+        this.rentals.add(rental);
+        return rental;
+    }
+
+    @Override
+    public void delete(Rental rental) {
+        this.rentals.remove(rental);
+    }
+
+    @Override
+    public List<Rental> readByCustomer(Customer customer) {
+        ArrayList<Rental> r = new ArrayList<>();
+        System.out.println("Looking up rentals for customer: " + customer);
+        for (Rental rental : rentals) {
+            if (rental.getCustomer().equals(customer)) {
+                System.out.println("Adding rental:" + rental);
+                r.add(rental);
+            }
+        }
+        r.sort((o1, o2) -> o1.getId().compareTo(o2.getId()));
+        return r;
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/InvoiceService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/InvoiceService.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/InvoiceService.java	(date 1432685042000)
@@ -0,0 +1,12 @@
+package at.ac.tuwien.qs.movierental;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.util.List;
+
+public interface InvoiceService {
+
+    void payInvoice(Customer customer, List<Rental> returnedList, LocalDate generationDate);
+
+    String generateIncoicePreview(Customer customer, List<Rental> returnedList, List<Rental> lentList, LocalDateTime generationDateTime);
+}
Index: src/at/ac/tuwien/qs/movierental/DummyCustomerDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/DummyCustomerDAO.java	(date 1483359717000)
+++ src/at/ac/tuwien/qs/movierental/DummyCustomerDAO.java	(date 1483359717000)
@@ -0,0 +1,142 @@
+package at.ac.tuwien.qs.movierental;
+
+import java.time.LocalDate;
+import java.time.format.DateTimeFormatter;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.concurrent.atomic.AtomicLong;
+
+public class DummyCustomerDAO implements CustomerDAO {
+
+    private AtomicLong atomicLong = new AtomicLong(0);
+
+    public DummyCustomerDAO() {
+        Customer customer;
+        {
+            customer = new Customer();
+            customer.setId(atomicLong.addAndGet(1));
+            customer.setFirstName("Johann");
+            customer.setLastName("Fischer");
+            customer.setEmail("angler@gmail.com");
+            customer.setPhone("+43 674 156 45 78");
+            customer.setBirthday(LocalDate.parse("23. 05. 1960", DATE_TIME_FORMATTER));
+            customer.setAddress("Neustiftgasse 31");
+            customer.setZipCode("1070");
+            customer.setCity("Wien");
+            customer.setPatron(true);
+            customer.setPhoto(null);
+            customer.setVideopoints(12);
+            customers.add(customer);
+        }
+        {
+            customer = new Customer();
+            customer.setId(atomicLong.addAndGet(1));
+            customer.setFirstName("Linda");
+            customer.setLastName("Mayer");
+            customer.setEmail("Lucy2001@hotmail.com");
+            customer.setPhone("+43 555 61 61");
+            customer.setBirthday(LocalDate.parse("01. 04. 2010", DATE_TIME_FORMATTER));
+            customer.setAddress("Berggasse 11");
+            customer.setZipCode("3002");
+            customer.setCity("Purkersdorf");
+            customer.setPatron(true);
+            customer.setPhoto(null);
+            customer.setVideopoints(2);
+            customers.add(customer);
+        }
+        {
+            customer = new Customer();
+            customer.setId(atomicLong.addAndGet(1));
+            customer.setFirstName("Paul");
+            customer.setLastName("Wagner");
+            customer.setEmail("paul.wagner@spambot.com");
+            customer.setPhone("+43 222 12 12");
+            customer.setBirthday(LocalDate.parse("21. 04. 2004", DATE_TIME_FORMATTER));
+            customer.setAddress("Währinger Straße 102");
+            customer.setZipCode("1118");
+            customer.setCity("Wien");
+            customer.setPatron(false);
+            customer.setPhoto(null);
+            customer.setVideopoints(50);
+            customers.add(customer);
+        }
+        {
+            customer = new Customer();
+            customer.setId(atomicLong.addAndGet(1));
+            customer.setFirstName("Sabine");
+            customer.setLastName("Wild");
+            customer.setEmail("swild@gmx.at");
+            customer.setPhone(null);
+            customer.setBirthday(LocalDate.parse("12. 12. 1999", DATE_TIME_FORMATTER));
+            customer.setAddress("Kleine Pfarrgasse 26");
+            customer.setZipCode("1020");
+            customer.setCity("Wien");
+            customer.setPatron(true);
+            customer.setPhoto(null);
+            customer.setVideopoints(42);
+            customers.add(customer);
+        }
+        {
+            customer = new Customer();
+            customer.setId(atomicLong.addAndGet(1));
+            customer.setFirstName("Veronika");
+            customer.setLastName("Raab");
+            customer.setEmail("veronika@raab.at");
+            customer.setPhone("+43 664 500 800");
+            customer.setBirthday(LocalDate.parse("30. 11. 1986", DATE_TIME_FORMATTER));
+            customer.setAddress("Wallnerstraße 1-1A");
+            customer.setZipCode("1010");
+            customer.setCity("Wien");
+            customer.setPatron(false);
+            customer.setPhoto(null);
+            customer.setVideopoints(21);
+            customers.add(customer);
+        }
+    }
+
+    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("dd. MM. yyyy");
+
+    private HashSet<Customer> customers = new HashSet<>();
+
+    @Override
+    public Customer create(Customer customer) {
+        customer.setId(atomicLong.addAndGet(1));
+        customers.add(customer);
+        return customer;
+    }
+    /**
+     * BugFinder
+     * hier wird customer.getId() mittels == vergleichen
+     * wobei die korrekte methode .equals(); ist !
+     *
+     */
+    @Override
+    public Customer read(Long id) {
+        for(Customer customer : customers) {
+            if(customer.getId().equals(id)) {
+                return customer;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public List<Customer> read() {
+        ArrayList<Customer> c = new ArrayList<>(this.customers);
+        c.sort((o1, o2) -> o1.getId().compareTo(o2.getId()));
+        return c;
+    }
+
+    @Override
+    public Customer update(Customer customer) {
+        this.customers.add(customer);
+        return customer;
+    }
+
+    @Override
+    public void delete(Customer customer) {
+        this.customers.remove(customer);
+    }
+
+}
Index: src/at/ac/tuwien/qs/movierental/MovieDataService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/MovieDataService.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/MovieDataService.java	(date 1432685042000)
@@ -0,0 +1,17 @@
+package at.ac.tuwien.qs.movierental;
+
+import java.util.List;
+
+public interface MovieDataService{
+
+    /**
+     * Lookup a given movie in a service and fill as much fields as possible.
+     * The fields have to be valid.
+     *
+     * @param movie which should be looked up
+     * @return a list of matching movies
+     * @throws ServiceNotAvailableException if the underlying service is not available or malfunctioning
+     */
+    List<Movie> searchMovies(Movie movie) throws ServiceNotAvailableException;
+
+}
Index: src/at/ac/tuwien/qs/movierental/RentalController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/RentalController.java	(date 1483359275000)
+++ src/at/ac/tuwien/qs/movierental/RentalController.java	(date 1483359275000)
@@ -0,0 +1,304 @@
+package at.ac.tuwien.qs.movierental;
+
+import at.ac.tuwien.qs.movierental.ui.controls.RentalActionButton;
+import at.ac.tuwien.qs.movierental.ui.controls.TemporalAccessorCell;
+import javafx.beans.property.SimpleObjectProperty;
+import javafx.collections.FXCollections;
+import javafx.collections.ListChangeListener;
+import javafx.collections.ObservableList;
+import javafx.collections.transformation.FilteredList;
+import javafx.collections.transformation.SortedList;
+import javafx.fxml.FXML;
+import javafx.scene.control.*;
+import javafx.scene.image.Image;
+import javafx.scene.image.ImageView;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
+
+public class RentalController {
+
+    @FXML
+    private TextField txtSearchCustomer;
+    @FXML
+    private ListView<Customer> lstCustomers;
+    @FXML
+    private ImageView imgSelectCustomer;
+    @FXML
+    private ToggleButton tglSelectCustomer;
+    @FXML
+    private TextField txtSearchMovie;
+    @FXML
+    private ListView<Movie> lstMovies;
+    @FXML
+    private Button btnAddMovie;
+    @FXML
+    private TableView<Rental> tblRentalOverview;
+    @FXML
+    private TableColumn<Rental, Long> tcMovieID;
+    @FXML
+    private TableColumn<Rental, String> tcTitle;
+    @FXML
+    private TableColumn<Rental, LocalDate> tcLentDate;
+    @FXML
+    private TableColumn<Rental, Rental> tcAction;
+    @FXML
+    private TextArea txtInvoice;
+    @FXML
+    private Button btnCompleteRental;
+
+    private static final Image CUSTOMER_SELECTED = new Image(RentalController.class.getResourceAsStream("/images/deselectUser.png"));
+    private static final Image NO_CUSTOMER_SELECTED = new Image(RentalController.class.getResourceAsStream("/images/selectUser.png"));
+
+    private ObservableList<Rental> rentalObservableList = FXCollections.observableArrayList();
+    private FilteredList<Movie> filteredMovies;
+    private FilteredList<Customer> filteredCustomers;
+    private Customer currentCustomer;
+
+    private ObservableList<Rental> rentalsToPay = FXCollections.observableArrayList();
+    private ObservableList<Rental> newRentals = FXCollections.observableArrayList();
+    private RentalDAO rentalDAO;
+    private InvoiceService invoiceService;
+
+    public void setRentalDAO(RentalDAO rentalDAO) {
+        this.rentalDAO = rentalDAO;
+    }
+
+    public void setInvoiceService(InvoiceService invoiceService) {
+        this.invoiceService = invoiceService;
+    }
+
+    /**
+     * We needed this class ages ago
+     */
+    /**
+     * FindBugs hat hier einen Fehler gefunden:
+     * es sollte sich hierbei um eine statische innere Klasse handeln
+     */
+    static class RentalWrapper {
+        public Rental rental;
+        public boolean pay = false;
+    }
+
+    @FXML
+    private void initialize() {
+        // init table columns
+        this.tcMovieID.setCellValueFactory(cellData -> cellData.getValue().getMovie().idProperty());
+        this.tcTitle.setCellValueFactory(cellData -> cellData.getValue().getMovie().titleProperty());
+        this.tcLentDate.setCellValueFactory(cellData -> cellData.getValue().dateLentProperty());
+        this.tcLentDate.setCellFactory(param -> new TemporalAccessorCell(DateTimeFormatter.ofPattern("dd. LLL yyyy")));
+        this.tcAction.setCellValueFactory(cellData -> new SimpleObjectProperty<>(cellData.getValue()));
+        this.tcAction.setCellFactory(param -> new RentalActionButton(rental -> this.removeRentalButtonPressed((Rental) rental), rental -> this.payRentalButtonPressed((Rental) rental)));
+        this.txtSearchMovie.textProperty().addListener((observable, oldValue, newValue) -> filterMovieList(newValue));
+        this.txtSearchCustomer.textProperty().addListener((observable, oldValue, newValue) -> filterCustomerList(newValue));
+        this.tblRentalOverview.setItems(this.rentalObservableList);
+        // init customer and movie list and add button behaviour
+        this.lstMovies.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
+            if (newValue == null) {
+                this.btnAddMovie.setDisable(true);
+            } else {
+                this.btnAddMovie.setDisable(false);
+            }
+        });
+        this.lstCustomers.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
+            if (newValue == null) {
+                this.tglSelectCustomer.setDisable(true);
+            } else {
+                this.tglSelectCustomer.setDisable(false);
+            }
+        });
+        // init customer list rendering
+        this.lstCustomers.setCellFactory(param -> new ListCell<Customer>() {
+            @Override
+            protected void updateItem(Customer customer, boolean empty) {
+                super.updateItem(customer, empty);
+                if (customer == null || empty) {
+                    setText(null);
+                } else {
+                    setText(customer.getId() + "; " + customer.getLastName().toUpperCase() + ",  " + customer.getFirstName());
+                }
+            }
+        });
+        // init movie list rendering
+        this.lstMovies.setCellFactory(param -> new ListCell<Movie>() {
+            @Override
+            protected void updateItem(Movie movie, boolean empty) {
+                super.updateItem(movie, empty);
+                if (movie == null || empty) {
+                    setText(null);
+                } else {
+                    setText(movie.getId() + "; " + movie.getTitle() + ((movie.getSubtitle() != null && !movie.getSubtitle().isEmpty()) ? " - " + movie.getSubtitle() : ""));
+                }
+            }
+        });
+        // add change listeners to pay/new- Rental lists to recalulcate the invoice
+        this.rentalsToPay.addListener((ListChangeListener<Rental>) c -> this.previewInvoice());
+        this.newRentals.addListener((ListChangeListener<Rental>) c -> this.previewInvoice());
+    }
+
+    private void removeRentalButtonPressed(Rental rental) {
+        this.rentalObservableList.remove(rental);
+        this.newRentals.remove(rental);
+    }
+
+    private void payRentalButtonPressed(Rental rental) {
+        if (rentalsToPay.contains(rental)) {
+            rentalsToPay.remove(rental);
+        } else {
+            rentalsToPay.add(rental);
+        }
+    }
+
+    private void filterCustomerList(String filter) {
+        RentalController.this.filteredCustomers.setPredicate(customer -> {
+            if (filter == null || filter.isEmpty()) {
+                return true;
+            }
+            String lowerCaseFilter = filter.toLowerCase();
+            // same as in CustomerManagementController make sure that this filter is always up to date
+            return (customer.getId() != null && customer.getId().toString().toLowerCase().contains(lowerCaseFilter)) ||
+                    (customer.getFirstName() != null && customer.getFirstName().toLowerCase().contains(lowerCaseFilter)) ||
+                    (customer.getLastName() != null && customer.getLastName().toLowerCase().contains(lowerCaseFilter)) ||
+                    (customer.getEmail() != null && customer.getEmail().toLowerCase().contains(lowerCaseFilter));
+        });
+    }
+
+    private void filterMovieList(String filter) {
+        RentalController.this.filteredMovies.setPredicate(movie -> {
+            if (filter == null || filter.isEmpty()) {
+                return true;
+            }
+            String lowerCaseFilter = filter.toLowerCase();
+            // same as in MovieManagementController make sure that this filter is always up to date
+            return (movie.getId() != null && movie.getId().toString().toLowerCase().contains(lowerCaseFilter)) ||
+                    (movie.getTitle() != null && movie.getTitle().toLowerCase().contains(lowerCaseFilter)) ||
+                    (movie.getSubtitle() != null && movie.getSubtitle().toLowerCase().contains(lowerCaseFilter)) ||
+                    (movie.getGenre() != null && movie.getGenre().toLowerCase().contains(lowerCaseFilter)) ||
+                    (movie.getDirector() != null && movie.getDirector().toLowerCase().contains(lowerCaseFilter) ||
+                            (movie.getYearPublished() != null && movie.getYearPublished().toString().toLowerCase().contains(lowerCaseFilter)));
+        });
+    }
+
+    public void selectCustomer() {
+        if (tglSelectCustomer.isSelected()) {
+            this.currentCustomer = this.lstCustomers.getSelectionModel().getSelectedItem();
+            this.rentalObservableList.setAll(this.rentalDAO.readByCustomer(this.currentCustomer));
+            imgSelectCustomer.setImage(CUSTOMER_SELECTED);
+        } else {
+            this.currentCustomer = null;
+            this.rentalObservableList.clear();
+            this.rentalsToPay.clear();
+            this.newRentals.clear();
+            imgSelectCustomer.setImage(NO_CUSTOMER_SELECTED);
+        }
+        this.btnAddMovie.setDisable(true);
+        this.txtSearchCustomer.setDisable(!this.txtSearchCustomer.isDisabled());
+        this.txtSearchMovie.setDisable(!this.txtSearchMovie.isDisabled());
+        this.lstCustomers.setDisable(!this.lstCustomers.isDisabled());
+        this.lstMovies.setDisable(!this.lstMovies.isDisabled());
+        this.tblRentalOverview.setDisable(!this.tblRentalOverview.isDisabled());
+        this.txtInvoice.setDisable(!this.txtInvoice.isDisabled());
+        this.btnCompleteRental.setDisable(!this.btnCompleteRental.isDisabled());
+        this.previewInvoice();
+    }
+
+    public void addMovie() {
+        Rental rental = new Rental();
+        rental.setCustomer(this.currentCustomer);
+        rental.setMovie(this.lstMovies.getSelectionModel().getSelectedItem());
+        rental.setDateLent(LocalDate.now());
+        try {
+            this.validateRental(rental);
+            this.rentalObservableList.add(rental);
+            this.newRentals.add(rental);
+        } catch (ValidationException e) {
+            Alert alert = new Alert(Alert.AlertType.ERROR);
+            alert.setTitle("Filmverleih | Entleihfehler");
+            alert.setHeaderText("Der Film kann nicht entliehen werden.");
+            alert.setContentText(e.getMessage());
+            alert.showAndWait();
+        }
+    }
+
+    public void completeRental() {
+        this.invoiceService.payInvoice(currentCustomer, this.rentalsToPay, LocalDate.now());
+        for (Rental rental : this.newRentals) {
+            this.rentalDAO.create(rental);
+        }
+        for (Rental rental : this.rentalsToPay) {
+            this.rentalDAO.delete(rental);
+            this.rentalObservableList.remove(rental);
+        }
+        this.rentalObservableList.clear();
+        this.newRentals.clear();
+        this.rentalsToPay.clear();
+        this.rentalObservableList.setAll(this.rentalDAO.readByCustomer(this.currentCustomer));
+    }
+
+    public void setMovies(ObservableList<Movie> movieObservableList) {
+        this.filteredMovies = new FilteredList<>(movieObservableList, p -> true);
+        SortedList<Movie> sortedData = new SortedList<>(this.filteredMovies);
+        this.lstMovies.setItems(sortedData);
+    }
+
+    public void setCustomers(ObservableList<Customer> customerObservableList) {
+        this.filteredCustomers = new FilteredList<>(customerObservableList, p -> true);
+        SortedList<Customer> sortedData = new SortedList<>(this.filteredCustomers);
+        this.lstCustomers.setItems(sortedData);
+    }
+
+    private void previewInvoice() {
+        if (this.currentCustomer == null) {
+            this.txtInvoice.setText("");
+        } else {
+            this.txtInvoice.setText(this.invoiceService.generateIncoicePreview(this.currentCustomer, rentalsToPay, newRentals, LocalDateTime.now()));
+        }
+    }
+
+    /**
+     * Validates a rental and checks if customer and movie are set and if the age rating is met.
+     * @param rental to validate
+     * @throws ValidationException if the validation fails
+     */
+    public void validateRental(Rental rental) throws ValidationException {
+        if (rental != null) {
+            if (rental.getCustomer() == null) {
+                throw new ValidationException("Kunde muss gesetzt sein.");
+            }
+            if (rental.getMovie() == null) {
+                throw new ValidationException("Film muss gesetzt sein.");
+            }
+            if (rental.getDateLent() == null) {
+                throw new ValidationException("Verleihtag muss gesetzt sein.");
+            }
+            long minAge = 0;
+            switch (rental.getMovie().getAgeRating()) {
+                case "FSK 0":
+                    minAge = 0;
+                    break;
+                case "FSK 6":
+                    minAge = 6;
+                    break;
+                case "FSK 12":
+                    minAge = 12;
+                    break;
+                case "FSk 16":
+                    minAge = 16;
+                    break;
+                case "FSK 18":
+                    minAge = 18;
+                    break;
+                case "RATED 21":
+                    minAge = 2l;
+                    break;
+            }
+            if (rental.getDateLent().minusYears(minAge).isBefore(rental.getCustomer().getBirthday())) {
+                throw new ValidationException("Der Kunde erfüllt die Altersfreigabe nicht! (" + rental.getMovie().getAgeRating() + ")");
+            }
+        } else {
+            throw new IllegalArgumentException("Rental has to be not null");
+        }
+
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/TooManyMoviesFound.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/TooManyMoviesFound.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/TooManyMoviesFound.java	(date 1432685042000)
@@ -0,0 +1,16 @@
+package at.ac.tuwien.qs.movierental;
+
+public class TooManyMoviesFound extends Exception {
+    
+    public TooManyMoviesFound(String message) {
+        super(message);
+    }
+
+    public TooManyMoviesFound() {
+        super();
+    }
+
+    public TooManyMoviesFound(Throwable t) {
+        super(t);
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/SimpleRatingService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/SimpleRatingService.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/SimpleRatingService.java	(date 1432685042000)
@@ -0,0 +1,28 @@
+package at.ac.tuwien.qs.movierental;
+
+import java.util.List;
+
+public class SimpleRatingService implements RatingService {
+
+    private MovieDataService movieDataService;
+
+    public SimpleRatingService(MovieDataService movieDataService) {
+        this.movieDataService = movieDataService;
+    }
+
+    @Override
+    public Float laodRatingForMovie(Movie movie) throws TooManyMoviesFound, NoMovieFoundException, ServiceNotAvailableException {
+        List<Movie> movieList = movieDataService.searchMovies(movie);
+        if (movieList.size() == 0) {
+            throw new NoMovieFoundException();
+        } else if (movieList.size() > 1) {
+            throw new TooManyMoviesFound();
+        } else {
+            Movie ratedMovie = movieList.get(0);
+            if (ratedMovie.getRating() == null || ratedMovie.getRating() < 0 || ratedMovie.getRating() > 5) {
+                throw new ServiceNotAvailableException("The service returned an unexpected Value.");
+            }
+            return ratedMovie.getRating();
+        }
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/ValidationException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/ValidationException.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/ValidationException.java	(date 1432685042000)
@@ -0,0 +1,15 @@
+package at.ac.tuwien.qs.movierental;
+
+public class ValidationException extends Exception {
+    public ValidationException(String message) {
+        super(message);
+    }
+
+    public ValidationException() {
+        super();
+    }
+
+    public ValidationException(Throwable t) {
+        super(t);
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/SimpleInvoiceService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/SimpleInvoiceService.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/SimpleInvoiceService.java	(date 1432685042000)
@@ -0,0 +1,108 @@
+package at.ac.tuwien.qs.movierental;
+
+import java.text.DecimalFormat;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
+import java.util.List;
+
+public class SimpleInvoiceService implements InvoiceService {
+
+    private static final DecimalFormat EURO_FORMATTER = new DecimalFormat("'€ '0.00");
+    private static final DecimalFormat PERCENT_FORMATTER = new DecimalFormat("0.0'%'");
+    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("dd. LLL yyyy / HH:mm");
+
+    public void payInvoice(Customer customer, List<Rental> returnedList, LocalDate generationDate) {
+        long priceInCent = getTotalPriceInCents(customer, returnedList, generationDate);
+        if (returnedList.size() > 0) {
+            if (customer.getVideopoints() > 10) {
+                customer.setVideopoints(customer.getVideopoints() - 10);
+            }
+            if (customer.getVideopoints() > 20) {
+                customer.setVideopoints(customer.getVideopoints() - 20);
+            }
+        }
+        customer.setVideopoints(customer.getVideopoints() + customer.calculateVideopointsGain(priceInCent, customer.getPatron()));
+    }
+
+    public long getTotalPriceInCents(Customer customer, List<Rental> returnedList, LocalDate generationDate) {
+        long priceInCent = 0;
+        for (Rental rental : returnedList) {
+            priceInCent = customer.calculatePriceForRental(rental, generationDate);
+        }
+        priceInCent = (long) (priceInCent - (priceInCent / 100 * customer.calculateDiscount()));
+        return priceInCent;
+    }
+
+
+    public String generateIncoicePreview(Customer customer, List<Rental> returnedList, List<Rental> lentList, LocalDateTime generationTime) {
+        StringBuilder invoiceStringBuilder = new StringBuilder("");
+        invoiceStringBuilder.append("Kundennummer:").append(String.format("%37s", customer.getId())).append("\n");
+        invoiceStringBuilder.append("Kunde:").append(String.format("%44s", customer.getLastName().toUpperCase() + ", " + customer.getFirstName())).append("\n");
+        invoiceStringBuilder.append("Datum/Zeit:").append(String.format("%39s", DATE_TIME_FORMATTER.format(generationTime))).append("\n");
+        if (!returnedList.isEmpty()) {
+            invoiceStringBuilder.append("\n").append("----------------- Zurückgebracht -----------------").append("\n\n");
+            for (Rental rental : returnedList) {
+                Movie movie = rental.getMovie();
+                StringBuilder movieBuilder = new StringBuilder();
+                movieBuilder.append(movie.getId())
+                        .append("; ")
+                        .append(movie.getTitle())
+                        .append((movie.getSubtitle() != null && !movie.getSubtitle().isEmpty()) ? " - " + movie.getSubtitle() : "");
+                String movieShortname = movieBuilder.toString();
+                if (movieShortname.length() > 33) {
+                    movieShortname = movieShortname.substring(0, 30) + "...";
+                }
+                String price = EURO_FORMATTER.format(customer.calculatePriceForRental(rental, generationTime.toLocalDate()) / 100.0);
+                invoiceStringBuilder.append(String.format("%-33s %16s", movieShortname, price))
+                        .append("\n");
+            }
+        }
+        if (!lentList.isEmpty()) {
+            invoiceStringBuilder.append("\n").append("------------------- Ausgeborgt -------------------").append("\n\n");
+            for (Rental rental : lentList) {
+                Movie movie = rental.getMovie();
+                StringBuilder movieBuilder = new StringBuilder();
+                movieBuilder.append(movie.getId())
+                        .append("; ")
+                        .append(movie.getTitle())
+                        .append((movie.getSubtitle() != null && !movie.getSubtitle().isEmpty()) ? " - " + movie.getSubtitle() : "");
+                String movieShortname = movieBuilder.toString();
+                if (movieShortname.length() > 33) {
+                    movieShortname = movieShortname.substring(0, 30) + "...";
+                }
+                String price = EURO_FORMATTER.format(customer.calculatePriceForRental(rental, generationTime.toLocalDate()) / 100.0) + "/tag";
+                invoiceStringBuilder.append(String.format("%-33s %16s", movieShortname, price))
+                        .append("\n");
+            }
+        }
+        long totalPriceInCents = this.getTotalPriceInCents(customer, returnedList, generationTime.toLocalDate());
+        int oldVideopoints = customer.getVideopoints();
+        int videopointsUsed = 0;
+        int videopointsGained = 0;
+        if (returnedList.size() > 0) {
+            if (oldVideopoints > 20) {
+                videopointsUsed = 20;
+            } else if (oldVideopoints > 10) {
+                videopointsUsed = 10;
+            }
+            videopointsGained = customer.calculateVideopointsGain(totalPriceInCents, customer.getPatron());
+        }
+        int newVideopoints = oldVideopoints + videopointsGained - videopointsUsed;
+        invoiceStringBuilder.append("\n");
+        invoiceStringBuilder.append("------------------- Videopoints ------------------").append("\n\n");
+        invoiceStringBuilder.append("Bisherige Videopoints:").append(String.format("%28s", oldVideopoints)).append("\n");
+        invoiceStringBuilder.append("Verbrauch Videopoints:").append(String.format("%28s", videopointsUsed)).append("\n");
+        invoiceStringBuilder.append("Gutschrift Videopoints:").append(String.format("%27s", videopointsGained)).append("\n");
+        invoiceStringBuilder.append("Neue Videopoints:").append(String.format("%33s", newVideopoints)).append("\n");
+        invoiceStringBuilder.append("\n");
+        invoiceStringBuilder.append("--------------------- Rabatte --------------------").append("\n\n");
+        invoiceStringBuilder.append("Stammkunde:").append(String.format("%39s", (customer.getPatron()) ? "Ja" : "Nein")).append("\n");
+        invoiceStringBuilder.append("Rabatt:").append(String.format("%43s", PERCENT_FORMATTER.format(customer.calculateDiscount()))).append("\n");
+        invoiceStringBuilder.append("\n");
+        invoiceStringBuilder.append("------------------- Abrechnung -------------------").append("\n\n");
+        invoiceStringBuilder.append("Zu zahlender Betrag:").append(String.format("%30s", EURO_FORMATTER.format(totalPriceInCents / 100.0))).append("\n");
+        return invoiceStringBuilder.toString();
+    }
+
+}
Index: src/at/ac/tuwien/qs/movierental/ui/controls/EuroCell.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/ui/controls/EuroCell.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/ui/controls/EuroCell.java	(date 1432685042000)
@@ -0,0 +1,20 @@
+package at.ac.tuwien.qs.movierental.ui.controls;
+
+import javafx.scene.control.TableCell;
+
+import java.text.DecimalFormat;
+
+public class EuroCell<TYPE> extends TableCell<TYPE, Integer> {
+
+    private static final DecimalFormat DECIMAL_FORMAT = new DecimalFormat("'€ '0.00");
+
+    @Override
+    protected void updateItem(Integer  priceInCent, boolean empty) {
+        super.updateItem(priceInCent, empty);
+        if (priceInCent == null || empty) {
+            setText(null);
+        } else {
+            setText(DECIMAL_FORMAT.format(priceInCent/100.0));
+        }
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/NoMovieFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/NoMovieFoundException.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/NoMovieFoundException.java	(date 1432685042000)
@@ -0,0 +1,15 @@
+package at.ac.tuwien.qs.movierental;
+
+public class NoMovieFoundException extends Exception {
+    public NoMovieFoundException(String message) {
+        super(message);
+    }
+
+    public NoMovieFoundException() {
+        super();
+    }
+
+    public NoMovieFoundException(Throwable t) {
+        super(t);
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/ui/controls/BooleanCell.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/ui/controls/BooleanCell.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/ui/controls/BooleanCell.java	(date 1432685042000)
@@ -0,0 +1,19 @@
+package at.ac.tuwien.qs.movierental.ui.controls;
+
+import javafx.scene.control.TableCell;
+
+public class BooleanCell<TYPE> extends TableCell<TYPE, Boolean> {
+    @Override
+    protected void updateItem(Boolean item, boolean empty) {
+        super.updateItem(item, empty);
+        if (item == null || empty) {
+            setText(null);
+        } else {
+            if (item) {
+                setText("\u2713");
+            } else {
+                setText("\u274C");
+            }
+        }
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/MovieManagementController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/MovieManagementController.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/MovieManagementController.java	(date 1432685042000)
@@ -0,0 +1,394 @@
+package at.ac.tuwien.qs.movierental;
+
+import at.ac.tuwien.qs.movierental.ui.controls.BooleanCell;
+import at.ac.tuwien.qs.movierental.ui.controls.EuroCell;
+import javafx.collections.ObservableList;
+import javafx.collections.transformation.FilteredList;
+import javafx.collections.transformation.SortedList;
+import javafx.event.ActionEvent;
+import javafx.fxml.FXML;
+import javafx.scene.Node;
+import javafx.scene.control.*;
+import javafx.scene.image.Image;
+import javafx.scene.image.ImageView;
+import javafx.stage.FileChooser;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.text.NumberFormat;
+import java.time.Year;
+import java.time.format.DateTimeParseException;
+
+public class MovieManagementController {
+
+    private static final Image NO_COVER = new Image(RentalController.class.getResourceAsStream("/images/cover.png"));
+
+    @FXML
+    private TableView<Movie> tblMovies;
+    @FXML
+    private TableColumn<Movie, Long> tcMovieID;
+    @FXML
+    private TableColumn<Movie, String> tcTitle;
+    @FXML
+    private TableColumn<Movie, String> tcSubtitle;
+    @FXML
+    private TableColumn<Movie, String> tcGenre;
+    @FXML
+    private TableColumn<Movie, String> tcAgeRating;
+    @FXML
+    private TableColumn<Movie, String> tcLanguage;
+    @FXML
+    private TableColumn<Movie, Year> tcYearPublished;
+    @FXML
+    private TableColumn<Movie, String> tcDirector;
+    @FXML
+    private TableColumn<Movie, Integer> tcPrice;
+    @FXML
+    private TableColumn<Movie, Float> tcRating;
+    @FXML
+    private TableColumn<Movie, Boolean> tcSeries;
+    @FXML
+    private TableColumn<Movie, Integer> tcStock;
+    @FXML
+    private TableColumn<Movie, Integer> tcAvailable;
+    @FXML
+    private TableColumn<Movie, Integer> tcLent;
+
+    @FXML
+    private Label lblMovieID;
+    @FXML
+    private TextField txtTitle;
+    @FXML
+    private ComboBox<String> cbxGenre;
+    @FXML
+    private ComboBox<String> cbxLanguage;
+    @FXML
+    private TextField txtDirector;
+    @FXML
+    private TextField txtYearPublished;
+    @FXML
+    private Slider sliStock;
+    @FXML
+    private TextField txtStock;
+    @FXML
+    private TextField txtSubtitle;
+    @FXML
+    private ComboBox<String> cbxAgeRating;
+    @FXML
+    private TextField txtPriceInCent;
+    @FXML
+    private TextField txtRating;
+    @FXML
+    private CheckBox chkSeries;
+    @FXML
+    private Label lblAvailable;
+    @FXML
+    private Label lblLent;
+
+    @FXML
+    private ImageView imgCover;
+
+    @FXML
+    private TextField txtFilter;
+    @FXML
+    private ToggleButton tglFilter;
+
+    private File fileCover;
+
+    private Movie currentMovie;
+
+    private ObservableList<Movie> movieObservableList;
+    private FilteredList<Movie> filteredMovies;
+    private static final NumberFormat NUMBER_FORMAT = NumberFormat.getNumberInstance();
+
+    static {
+        NUMBER_FORMAT.setMaximumFractionDigits(0);
+    }
+
+    private MovieDAO movieDAO;
+    private RatingService ratingService;
+
+    @FXML
+    private void initialize() {
+        this.cbxGenre.getItems().addAll("Normal", "Kinder", "Klassiker", "Horror", "SciFi", "Fantasy");
+        this.cbxLanguage.getItems().addAll("Deutsch", "English", "Français", "Español");
+        this.cbxAgeRating.getItems().addAll("FSK 0", "FSK 6", "FSK 12", "FSK 16", "FSK 18", "RATED 21");
+        this.showMovieDetails(null);
+        this.tcMovieID.setCellValueFactory(cellData -> cellData.getValue().idProperty());
+        this.tcTitle.setCellValueFactory(cellData -> cellData.getValue().titleProperty());
+        this.tcSubtitle.setCellValueFactory(cellData -> cellData.getValue().subtitleProperty());
+        this.tcGenre.setCellValueFactory(cellData -> cellData.getValue().genreProperty());
+        this.tcAgeRating.setCellValueFactory(cellData -> cellData.getValue().ageRatingProperty());
+        this.tcLanguage.setCellValueFactory(cellData -> cellData.getValue().languageProperty());
+        this.tcYearPublished.setCellValueFactory(cellData -> cellData.getValue().yearPublishedProperty());
+        this.tcPrice.setCellValueFactory(cellData -> cellData.getValue().priceInCentsProperty());
+        this.tcPrice.setCellFactory(param -> new EuroCell());
+        this.tcDirector.setCellValueFactory(cellData -> cellData.getValue().directorProperty());
+        this.tcRating.setCellValueFactory(cellData -> cellData.getValue().ratingProperty());
+        this.tcSeries.setCellValueFactory(cellData -> cellData.getValue().seriesProperty());
+        this.tcSeries.setCellFactory(param -> new BooleanCell());
+        this.tcStock.setCellValueFactory(cellData -> cellData.getValue().stockProperty());
+        this.txtStock.textProperty().bindBidirectional(sliStock.valueProperty(), NUMBER_FORMAT);
+        this.txtFilter.textProperty().addListener((observable, oldValue, newValue) -> {
+            if (newValue == null || newValue.isEmpty()) {
+                this.tglFilter.setSelected(false);
+            } else {
+                this.tglFilter.setSelected(true);
+            }
+            filterTable(newValue);
+        });
+        this.tblMovies.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> showMovieDetails(newValue));
+    }
+
+    public void setMovies(ObservableList<Movie> movieObservableList) {
+        this.movieObservableList = movieObservableList;
+        this.tblMovies.setItems(this.movieObservableList);
+        this.filteredMovies = new FilteredList<>(this.movieObservableList, p -> true);
+        SortedList<Movie> sortedData = new SortedList<>(this.filteredMovies);
+        sortedData.comparatorProperty().bind(tblMovies.comparatorProperty());
+        tblMovies.setItems(sortedData);
+    }
+
+    private void filterTable(String filter) {
+        MovieManagementController.this.filteredMovies.setPredicate(movie -> {
+            if (filter == null || filter.isEmpty()) {
+                return true;
+            }
+            String lowerCaseFilter = filter.toLowerCase();
+            return (movie.getId() != null && movie.getId().toString().toLowerCase().contains(lowerCaseFilter)) ||
+                    (movie.getTitle() != null && movie.getTitle().toLowerCase().contains(lowerCaseFilter)) ||
+                    (movie.getSubtitle() != null && movie.getSubtitle().toLowerCase().contains(lowerCaseFilter)) ||
+                    (movie.getGenre() != null && movie.getGenre().toLowerCase().contains(lowerCaseFilter)) ||
+                    (movie.getDirector() != null && movie.getDirector().toLowerCase().contains(lowerCaseFilter) ||
+                            (movie.getYearPublished() != null && movie.getYearPublished().toString().toLowerCase().contains(lowerCaseFilter)));
+        });
+    }
+
+    @FXML
+    private void filter() {
+        if (this.tglFilter.isSelected()) {
+            this.filterTable(this.txtFilter.getText());
+        } else {
+            this.filterTable(null);
+        }
+    }
+
+    private void showMovieDetails(Movie movie) {
+        this.currentMovie = movie;
+        if (movie != null) {
+            this.lblMovieID.setText((movie.getId() != null) ? movie.getId().toString() : null);
+            this.txtTitle.setText((movie.getTitle() != null) ? movie.getTitle() : null);
+            if (movie.getGenre() != null) {
+                this.cbxGenre.getSelectionModel().select(movie.getGenre());
+            } else {
+                this.cbxGenre.getSelectionModel().clearSelection();
+            }
+            if (movie.getLanguage() != null) {
+                this.cbxLanguage.getSelectionModel().select(movie.getLanguage());
+            } else {
+                this.cbxLanguage.getSelectionModel().clearSelection();
+            }
+            this.txtDirector.setText((movie.getDirector() != null) ? movie.getDirector() : null);
+            this.txtYearPublished.setText((movie.getYearPublished() != null) ? movie.getYearPublished().toString() : null);
+            this.sliStock.setValue((movie.getStock() != null) ? movie.getStock() : 0);
+            this.txtStock.setText((movie.getStock() != null) ? movie.getStock().toString() : null);
+            this.txtSubtitle.setText((movie.getSubtitle() != null) ? movie.getSubtitle() : null);
+            if (movie.getAgeRating() != null) {
+                this.cbxAgeRating.getSelectionModel().select(movie.getAgeRating());
+            } else {
+                this.cbxAgeRating.getSelectionModel().clearSelection();
+            }
+            this.txtPriceInCent.setText((movie.getPriceInCents() != null) ? movie.getPriceInCents().toString() : null);
+            this.txtRating.setText((movie.getRating() != null) ? movie.getRating().toString() : null);
+            this.chkSeries.setSelected((movie.getSeries() != null) ? movie.getSeries() : false);
+            this.lblAvailable.setText("0");
+            this.lblLent.setText("0");
+            try {
+                this.fileCover = movie.getCover();
+                this.imgCover.setImage((this.fileCover != null) ? new Image(new FileInputStream(this.fileCover)) : NO_COVER);
+            } catch (FileNotFoundException e) {
+                this.imgCover.setImage(NO_COVER);
+                this.fileCover = null;
+            }
+        } else {
+            this.lblMovieID.setText("");
+            this.txtTitle.setText("");
+            this.cbxGenre.getSelectionModel().clearSelection();
+            this.cbxLanguage.getSelectionModel().clearSelection();
+            this.txtDirector.setText("");
+            this.txtYearPublished.setText("");
+            this.sliStock.setValue(0);
+            this.txtStock.setText("0");
+            this.txtSubtitle.setText("");
+            this.cbxAgeRating.getSelectionModel().clearSelection();
+            this.txtPriceInCent.setText("0");
+            this.txtRating.setText("");
+            this.chkSeries.setSelected(false);
+            this.lblAvailable.setText("0");
+            this.lblLent.setText("0");
+            this.imgCover.setImage(NO_COVER);
+            this.fileCover = null;
+        }
+
+    }
+
+    @FXML
+    private void selectCover(ActionEvent actionEvent) {
+        FileChooser fileChooser = new FileChooser();
+        fileChooser.setTitle("Filmverleih | Lade Foto");
+        fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter("Bilddaten", "*.png", "*.jpg", "*.jepg"));
+        File file = fileChooser.showOpenDialog(((Node) actionEvent.getSource()).getScene().getWindow());
+        if (file != null && file.exists()) {
+            try {
+                this.imgCover.setImage(new Image(new FileInputStream(file)));
+                this.fileCover = file;
+            } catch (FileNotFoundException e) {
+                this.imgCover.setImage(NO_COVER);
+            }
+        }
+    }
+
+    @FXML
+    private void delete() {
+        Movie selectedMovie = this.tblMovies.getSelectionModel().getSelectedItem();
+        this.movieObservableList.remove(selectedMovie);
+        this.tblMovies.getSelectionModel().clearSelection();
+    }
+
+    @FXML
+    private void persist() {
+        String errorMessage = "";
+        if (this.txtTitle.getText().length() < 3 || this.txtTitle.getText().length() > 250) {
+            errorMessage += "Der Filmtitel darf nicht mit einem Leerzeichen beginnen oder enden.\n";
+        }
+        if (this.txtTitle.getText().length() < 3 || this.txtTitle.getText().length() > 250) {
+            errorMessage += "Der Filmtitel muss zwischen 3 und 250 Zeichen lang sein.\n";
+        }
+        if (this.txtSubtitle.getText() != null && !this.txtSubtitle.getText().isEmpty() && (this.txtSubtitle.getText().length() < 3 || this.txtSubtitle.getText().length() > 250)) {
+            errorMessage += "Der Subtitel darf nicht mit einem Leerzeichen beginnen oder enden.\n";
+        }
+        if (this.txtSubtitle.getText() != null && !this.txtSubtitle.getText().isEmpty() && this.txtSubtitle.getText().length() < 3 || this.txtSubtitle.getText().length() > 250) {
+            errorMessage += "Der Subtitel muss zwischen 3 und 250 Zeichen lang sein.\n";
+        }
+        if (this.cbxGenre.getSelectionModel().getSelectedItem() == null) {
+            errorMessage += "Es muss ein Genre ausgewählt werden.\n";
+        }
+        if (this.cbxAgeRating.getSelectionModel().getSelectedItem() == null) {
+            errorMessage += "Es muss eine Altersfreigabe ausgewählt werden.\n";
+        }
+        if (this.cbxLanguage.getSelectionModel().getSelectedItem() == null) {
+            errorMessage += "Es muss eine Sprache ausgewählt werden.\n";
+        }
+        try {
+            float rating = Float.parseFloat(this.txtRating.getText());
+            if (rating < 0 || rating > 5) {
+                errorMessage += "Das Rating muss zwischen 0 und 5 liegen.\n";
+            }
+        } catch (NumberFormatException e) {
+            errorMessage += "Es muss ein gültiges Rating eingegeben werden.\n";
+        }
+        if (this.txtYearPublished.getText() != null && !this.txtYearPublished.getText().isEmpty()) {
+            try {
+                Year year = Year.parse(this.txtYearPublished.getText());
+                if (year.isBefore(Year.parse("1800")) || year.isAfter(Year.now())) {
+                    errorMessage += "Das Erscheinungsjahr muss nach 1800 und nicht in der Zukunft liegen.\n";
+                }
+            } catch (DateTimeParseException e) {
+                errorMessage += "Das eingegebene Erscheinungsjahr ist ungültig.\n";
+            }
+        }
+        if (this.txtDirector.getText() != null && !this.txtDirector.getText().isEmpty() && (this.txtDirector.getText().length() < 3 || this.txtDirector.getText().length() > 250)) {
+            errorMessage += "Der Name des Regisseur darf nicht mit einem Leerzeichen beginnen oder enden.\n";
+        }
+        if (this.txtDirector.getText() != null && !this.txtDirector.getText().isEmpty() && this.txtDirector.getText().length() < 3 || this.txtSubtitle.getText().length() > 250) {
+            errorMessage += "Der Name des Regisseur muss zwischen 3 und 250 Zeichen lang sein.\n";
+        }
+        try {
+            int stock = Integer.parseInt(this.txtStock.getText());
+            if (stock < 0 || stock > 50) {
+                errorMessage += "Die Anzahl der verfügbaren Filme muss zwischen 0 und 50 liegen.\n";
+            }
+        } catch (NumberFormatException e) {
+            errorMessage += "Die Anzahl der verfügbaren Filme muss zwischen 0 und 50 liegen.\n";
+        }
+        if (!errorMessage.isEmpty()) {
+            Alert alert = new Alert(Alert.AlertType.ERROR);
+            alert.setTitle("Filmverleih | Eingabefehler");
+            alert.setHeaderText("Folgende Daten der Eingabe sind Fehlerhaft");
+            alert.setContentText(errorMessage);
+            alert.showAndWait();
+        } else {
+            Movie movie = currentMovie;
+            if (currentMovie == null) {
+                movie = new Movie();
+            }
+            this.fillMovieWithFieldData(movie);
+            if (currentMovie == null) {
+                currentMovie = this.movieDAO.create(movie);
+                this.movieObservableList.add(currentMovie);
+            } else {
+                this.movieDAO.update(movie);
+            }
+            this.tblMovies.getSelectionModel().select(currentMovie);
+        }
+    }
+
+    private void fillMovieWithFieldData(Movie movie) {
+        movie.setTitle(this.txtTitle.getText());
+        movie.setSubtitle(this.txtSubtitle.getText());
+        movie.setGenre(this.cbxGenre.getSelectionModel().getSelectedItem());
+        movie.setAgeRating(this.cbxAgeRating.getSelectionModel().getSelectedItem());
+        movie.setLanguage(this.cbxLanguage.getSelectionModel().getSelectedItem());
+        movie.setPriceInCents((this.txtPriceInCent.getText() != null && !this.txtPriceInCent.getText().isEmpty()) ? Integer.parseInt(this.txtPriceInCent.getText()) : null);
+        movie.setDirector(this.txtDirector.getText());
+        movie.setRating((this.txtRating.getText() != null && !this.txtRating.getText().isEmpty()) ? Float.parseFloat(this.txtRating.getText()) : null);
+        movie.setYearPublished((this.txtYearPublished.getText() != null && !this.txtYearPublished.getText().isEmpty()) ? Year.parse(this.txtYearPublished.getText()) : null);
+        movie.setSeries(this.chkSeries.isSelected());
+        movie.setStock(Integer.parseInt(NUMBER_FORMAT.format(this.sliStock.getValue())));
+    }
+
+    @FXML
+    private void reset() {
+        this.tblMovies.getSelectionModel().clearSelection();
+        this.showMovieDetails(null);
+    }
+
+    @FXML
+    private void loadFromService() {
+        Movie movie = new Movie();
+        this.fillMovieWithFieldData(movie);
+        try {
+            String rating = this.ratingService.laodRatingForMovie(movie).toString();
+            System.out.println(rating);
+            this.txtRating.setText(rating);
+        } catch (TooManyMoviesFound tooManyMoviesFound) {
+            Alert alert = new Alert(Alert.AlertType.ERROR);
+            alert.setTitle("Filmverleih | Bewertungsservice Fehler");
+            alert.setHeaderText("Es wurden zu viele passende Filme gefunden.");
+            alert.setContentText("Versuchen Sie die Suchanfrage zu konkretisieren.");
+            alert.showAndWait();
+        } catch (NoMovieFoundException e) {
+            Alert alert = new Alert(Alert.AlertType.ERROR);
+            alert.setTitle("Filmverleih | Bewertungsservice Fehler");
+            alert.setHeaderText("Es wurden keine passende Filme gefunden.");
+            alert.setContentText("Versuchen Sie die Suchanfrage zu konkretisieren.");
+            alert.showAndWait();
+        } catch (ServiceNotAvailableException e) {
+            Alert alert = new Alert(Alert.AlertType.ERROR);
+            alert.setTitle("Filmverleih | Bewertungsservice Fehler");
+            alert.setHeaderText("Ein unerwarteter Fehler ist aufgetreten.");
+            alert.setContentText(e.getMessage());
+            alert.showAndWait();
+        }
+    }
+
+    public void setMovieDAO(MovieDAO movieDAO) {
+        this.movieDAO = movieDAO;
+    }
+
+    public void setRatingService(RatingService ratingService) {
+        this.ratingService = ratingService;
+    }
+}
+
Index: src/at/ac/tuwien/qs/movierental/TheMovieDbMovieDataService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/TheMovieDbMovieDataService.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/TheMovieDbMovieDataService.java	(date 1432685042000)
@@ -0,0 +1,79 @@
+package at.ac.tuwien.qs.movierental;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.time.Year;
+import java.util.*;
+
+
+/**
+ * Based on the Implementation on: http://www.mkyong.com/java/how-to-send-http-request-getpost-in-java/
+ */
+public class TheMovieDbMovieDataService implements MovieDataService {
+
+    private static final String API_KEY = "7cf77b2fecb0e4e630aa326f9eaafbe3";
+    private static final String SEARCH_URL = "http://api.themoviedb.org/3/search/movie?api_key=" + API_KEY;
+    private static final String USER_AGENT = "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3";
+    private static final Calendar CALENDAR = Calendar.getInstance();
+
+    /**
+     * Search movies in TMDb.
+     * Don't forget that TMDb uses a different naming scheme instead of a title and a subtitle in different fields,#
+     * they use on field for both values, separated by " - ".
+     * Don't forget that TMDb uses a different rating range from 0 to 10.
+     * @param movie which should be looked up
+     * @return
+     * @throws ServiceNotAvailableException
+     */
+    @Override
+    public List<Movie> searchMovies(Movie movie) throws ServiceNotAvailableException {
+        ArrayList<Movie> returnMovies = new ArrayList<>();
+        try {
+            String title = movie.getTitle();
+            if (movie.getSubtitle() != null && !movie.getSubtitle().isEmpty()) {
+                title += " " + movie.getSubtitle();
+            }
+            String year = "";
+            if (movie.getYearPublished() != null) {
+                year += movie.getYearPublished().toString();
+            }
+            URL url = null;
+            url = new URL(SEARCH_URL + "&query=" + URLEncoder.encode(title, "UTF-8").replace("+", "%20") + "&primary_release_year=" + year);
+            System.out.println("Sending Query: " + url);
+            HttpURLConnection con = (HttpURLConnection) url.openConnection();
+            con.setRequestMethod("GET");
+            con.setRequestProperty("User-Agent", USER_AGENT);
+            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
+            String inputLine;
+            StringBuffer response = new StringBuffer();
+            while ((inputLine = in.readLine()) != null) {
+                response.append(inputLine);
+            }
+            in.close();
+            System.out.println("Response was: " + response);
+            ObjectMapper mapper = new ObjectMapper();
+            TMDbResult tmDbResult = mapper.readValue(response.toString(), TMDbResult.class);
+            for (TMDbMovie tmDbMovie : tmDbResult.movies) {
+                Movie resultMovie = new Movie();
+                String[] titles = tmDbMovie.originalTitle.split("\\-", 2);
+                resultMovie.setTitle(titles[0].trim());
+                if (titles.length == 2) {
+                    resultMovie.setSubtitle(titles[1].trim());
+                }
+                resultMovie.setRating(tmDbMovie.voteAverage);
+                CALENDAR.setTime(tmDbMovie.releaseDate);
+                resultMovie.setYearPublished(Year.of(CALENDAR.get(Calendar.YEAR)));
+                returnMovies.add(resultMovie);
+            }
+        } catch (IOException e) {
+            throw new ServiceNotAvailableException(e);
+        }
+        return returnMovies;
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/CustomerManagementController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/CustomerManagementController.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/CustomerManagementController.java	(date 1432685042000)
@@ -0,0 +1,306 @@
+package at.ac.tuwien.qs.movierental;
+
+import at.ac.tuwien.qs.movierental.ui.controls.BooleanCell;
+import at.ac.tuwien.qs.movierental.ui.controls.TemporalAccessorCell;
+import javafx.collections.ObservableList;
+import javafx.collections.transformation.FilteredList;
+import javafx.collections.transformation.SortedList;
+import javafx.event.ActionEvent;
+import javafx.fxml.FXML;
+import javafx.scene.Node;
+import javafx.scene.control.*;
+import javafx.scene.image.Image;
+import javafx.scene.image.ImageView;
+import javafx.stage.FileChooser;
+import javafx.stage.FileChooser.ExtensionFilter;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.time.LocalDate;
+import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeParseException;
+
+public class CustomerManagementController {
+
+    private static final Image NO_PHOTO = new Image(RentalController.class.getResourceAsStream("/images/user.png"));
+
+    @FXML
+    private TableView<Customer> tblCustomers;
+    @FXML
+    private TableColumn<Customer, Long> tcCustomerId;
+    @FXML
+    private TableColumn<Customer, String> tcFirstName;
+    @FXML
+    private TableColumn<Customer, String> tcLastName;
+    @FXML
+    private TableColumn<Customer, String> tcEmail;
+    @FXML
+    private TableColumn<Customer, LocalDate> tcBirthday;
+    @FXML
+    private TableColumn<Customer, String> tcPhone;
+    @FXML
+    private TableColumn<Customer, String> tcZipCode;
+    @FXML
+    private TableColumn<Customer, Boolean> tcPatron;
+    @FXML
+    private TableColumn<Customer, Integer> tcVideopoints;
+    @FXML
+    private TableColumn<Customer, Integer> tcRent;
+    @FXML
+    private TableColumn<Customer, Integer> tcOverdue;
+    @FXML
+    private Label lblCustomerID;
+    @FXML
+    private TextField txtFirstName;
+    @FXML
+    private TextField txtLastName;
+    @FXML
+    private TextField txtEmail;
+    @FXML
+    private TextField txtPhone;
+    @FXML
+    private TextField txtBirthday;
+    @FXML
+    private CheckBox chkPatron;
+    @FXML
+    private TextArea txtAddress;
+    @FXML
+    private TextField txtZipCode;
+    @FXML
+    private TextField txtCity;
+    @FXML
+    private Label lblVideopoints;
+    @FXML
+    private ImageView imgPhoto;
+
+    @FXML
+    private TextField txtFilter;
+    @FXML
+    private ToggleButton tglFilter;
+
+    private File filePhoto;
+
+    private Customer currentCustomer;
+
+    private ObservableList<Customer> customerObservableList;
+    private FilteredList<Customer> filteredCustomers;
+
+    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("dd. MM. yyyy");
+    private CustomerDAO customerDAO;
+
+    @FXML
+    private void initialize() {
+        this.showCustomerDetails(null);
+        this.tcCustomerId.setCellValueFactory(cellData -> cellData.getValue().idProperty());
+        this.tcFirstName.setCellValueFactory(cellData -> cellData.getValue().firstNameProperty());
+        this.tcLastName.setCellValueFactory(cellData -> cellData.getValue().lastNameProperty());
+        this.tcEmail.setCellValueFactory(cellData -> cellData.getValue().emailProperty());
+        this.tcBirthday.setCellValueFactory(cellData -> cellData.getValue().birthdayProperty());
+        this.tcBirthday.setCellFactory(param -> new TemporalAccessorCell(DateTimeFormatter.ofPattern("dd. LLL yyyy")));
+        this.tcPhone.setCellValueFactory(cellData -> cellData.getValue().phoneProperty());
+        this.tcZipCode.setCellValueFactory(cellData -> cellData.getValue().zipCodeProperty());
+        this.tcPatron.setCellValueFactory(cellData -> cellData.getValue().patronProperty());
+        this.tcPatron.setCellFactory(param -> new BooleanCell());
+        this.tcVideopoints.setCellValueFactory(cellData -> cellData.getValue().videopointsProperty());
+        this.txtFilter.textProperty().addListener((observable, oldValue, newValue) -> {
+            if (newValue == null || newValue.isEmpty()) {
+                this.tglFilter.setSelected(false);
+            } else {
+                this.tglFilter.setSelected(true);
+            }
+            filterTable(newValue);
+        });
+        this.tblCustomers.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> showCustomerDetails(newValue));
+    }
+
+    public void setCustomers(ObservableList<Customer> customerObservableList) {
+        this.customerObservableList = customerObservableList;
+        this.tblCustomers.setItems(this.customerObservableList);
+        this.filteredCustomers = new FilteredList<>(this.customerObservableList, p -> true);
+        SortedList<Customer> sortedData = new SortedList<>(this.filteredCustomers);
+        sortedData.comparatorProperty().bind(tblCustomers.comparatorProperty());
+        tblCustomers.setItems(sortedData);
+    }
+
+    private void filterTable(String filter) {
+        CustomerManagementController.this.filteredCustomers.setPredicate(customer -> {
+            if (filter == null || filter.isEmpty()) {
+                return true;
+            }
+            String lowerCaseFilter = filter.toLowerCase();
+            return (customer.getId() != null && customer.getId().toString().toLowerCase().contains(lowerCaseFilter)) ||
+                    (customer.getFirstName() != null && customer.getFirstName().toLowerCase().contains(lowerCaseFilter)) ||
+                    (customer.getLastName() != null && customer.getLastName().toLowerCase().contains(lowerCaseFilter)) ||
+                    (customer.getEmail() != null && customer.getEmail().toLowerCase().contains(lowerCaseFilter));
+        });
+    }
+
+    @FXML
+    private void filter() {
+        if (this.tglFilter.isSelected()) {
+            this.filterTable(this.txtFilter.getText());
+        } else {
+            this.filterTable(null);
+        }
+    }
+
+    @FXML
+    private void showCustomerDetails(Customer customer) {
+        this.currentCustomer = customer;
+        if (customer != null) {
+            this.lblCustomerID.setText((customer.getId() != null) ? customer.getId().toString() : "");
+            this.txtFirstName.setText((customer.getFirstName() != null) ? customer.getFirstName() : "");
+            this.txtLastName.setText((customer.getLastName() != null) ? customer.getLastName() : "");
+            this.txtEmail.setText((customer.getEmail() != null) ? customer.getEmail() : "");
+            this.txtPhone.setText((customer.getPhone() != null) ? customer.getPhone() : "");
+            this.txtBirthday.setText((customer.getBirthday() != null) ? DATE_TIME_FORMATTER.format(customer.getBirthday()) : "");
+            this.chkPatron.setSelected((customer.getPatron() != null) ? customer.getPatron() : false);
+            this.txtAddress.setText((customer.getAddress() != null) ? customer.getAddress() : "");
+            this.txtZipCode.setText((customer.getZipCode() != null) ? customer.getZipCode() : "");
+            this.txtCity.setText((customer.getCity() != null) ? customer.getCity() : "");
+            this.lblVideopoints.setText((customer.getVideopoints() != null) ? customer.getVideopoints().toString() : "0");
+            try {
+                this.filePhoto = customer.getPhoto();
+                this.imgPhoto.setImage((this.filePhoto != null) ? new Image(new FileInputStream(this.filePhoto)) : NO_PHOTO);
+            } catch (FileNotFoundException e) {
+                this.imgPhoto.setImage(NO_PHOTO);
+                this.filePhoto = null;
+            }
+        } else {
+            this.lblCustomerID.setText("");
+            this.txtFirstName.setText("");
+            this.txtLastName.setText("");
+            this.txtEmail.setText("");
+            this.txtPhone.setText("");
+            this.txtBirthday.setText("");
+            this.chkPatron.setSelected(false);
+            this.txtAddress.setText("");
+            this.txtZipCode.setText("");
+            this.txtCity.setText("");
+            this.lblVideopoints.setText("0");
+            this.imgPhoto.setImage(NO_PHOTO);
+            this.filePhoto = null;
+        }
+    }
+
+    @FXML
+    private void selectPhoto(ActionEvent actionEvent) {
+        FileChooser fileChooser = new FileChooser();
+        fileChooser.setTitle("Filmverleih | Lade Foto");
+        fileChooser.getExtensionFilters().addAll(new ExtensionFilter("Bilddaten", "*.png", "*.jpg", "*.jepg"));
+        File file = fileChooser.showOpenDialog(((Node) actionEvent.getSource()).getScene().getWindow());
+        if (file != null && file.exists()) {
+            try {
+                this.imgPhoto.setImage(new Image(new FileInputStream(file)));
+                this.filePhoto = file;
+            } catch (FileNotFoundException e) {
+                this.imgPhoto.setImage(NO_PHOTO);
+            }
+        }
+    }
+
+    @FXML
+    private void delete() {
+        Customer selectedCustomer = this.tblCustomers.getSelectionModel().getSelectedItem();
+        this.customerObservableList.remove(selectedCustomer);
+        this.tblCustomers.getSelectionModel().clearSelection();
+    }
+
+    @FXML
+    private void persist() {
+        String errorMessage = "";
+        if (this.txtFirstName.getText().startsWith(" ") || this.txtFirstName.getText().endsWith(" ")) {
+            errorMessage += "Der Vorname darf nicht mit einem Leerzeichen beginnen oder enden.\n";
+        }
+        if (this.txtFirstName.getText().length() < 3 || this.txtFirstName.getText().length() > 250) {
+            errorMessage += "Der Vorname muss zwischen 3 und 250 Zeichen lang sein.\n";
+        }
+        if (this.txtLastName.getText().startsWith(" ") || this.txtLastName.getText().endsWith(" ")) {
+            errorMessage += "Der Nachname darf nicht mit einem Leerzeichen beginnen oder enden.\n";
+        }
+        if (this.txtLastName.getText().length() < 3 || this.txtLastName.getText().length() > 250) {
+            errorMessage += "Der Nachname muss zwischen 3 und 250 Zeichen lang sein.\n";
+        }
+        if (!this.txtEmail.getText().isEmpty() && !this.txtEmail.getText().matches("^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$")) {
+            errorMessage += "Die eingegebene Email Adresse ist ungültig.\n";
+        }
+        if (!this.txtPhone.getText().isEmpty() && this.txtPhone.getText().length() < 3 || this.txtPhone.getText().length() > 250) {
+            errorMessage += "Der Telefonnummer muss zwischen 3 und 250 Zeichen lang sein.\n";
+        }
+        if (this.txtAddress.getText().startsWith(" ") || this.txtAddress.getText().endsWith(" ")) {
+            errorMessage += "Die Adresse darf nicht mit einem Leerzeichen beginnen oder enden.\n";
+        }
+        if (this.txtAddress.getText().length() < 3 || this.txtAddress.getText().length() > 1000) {
+            errorMessage += "Die Adresse muss zwischen 3 und 1000 Zeichen lang sein.\n";
+        }
+        if (this.txtCity.getText().startsWith(" ") || this.txtCity.getText().endsWith(" ")) {
+            errorMessage += "Die Stadt darf nicht mit einem Leerzeichen beginnen oder enden.\n";
+        }
+        if (this.txtCity.getText().length() < 3 || this.txtCity.getText().length() > 250) {
+            errorMessage += "Die Stadt muss zwischen 3 und 250 Zeichen lang sein.\n";
+        }
+        if (this.txtZipCode.getText().startsWith(" ") || this.txtZipCode.getText().endsWith(" ")) {
+            errorMessage += "Die Postleitzahl darf nicht mit einem Leerzeichen beginnen oder enden.\n";
+        }
+        if (this.txtZipCode.getText().length() < 2 || this.txtZipCode.getText().length() > 250) {
+            errorMessage += "Die Postleitzahl muss zwischen 2 und 250 Zeichen lang sein.\n";
+        }
+        try {
+            LocalDate bday = LocalDate.parse(this.txtBirthday.getText()
+                    .replaceAll("\\s", "")
+                    .replaceAll("(^\\d\\.)", "0$1")
+                    .replaceAll("(\\.)(\\d\\.)", ".0$2")
+                    .replaceAll("\\.", ". "), DATE_TIME_FORMATTER);
+            if (bday.isBefore(LocalDate.now().minusYears(120L)) || bday.isAfter(LocalDate.now())) {
+                errorMessage += "Das eingegebene Geburtsdatum darf maximal 120 Jahre in der Vergangenheit liegen.\n";
+            }
+        } catch (DateTimeParseException e) {
+            errorMessage += "Das eingegebene Geburtsdatum ist ungültig.\n";
+        }
+        if (!errorMessage.isEmpty()) {
+            Alert alert = new Alert(Alert.AlertType.ERROR);
+            alert.setTitle("Filmverleih | Eingabefehler");
+            alert.setHeaderText("Folgende Daten der Eingabe sind Fehlerhaft");
+            alert.setContentText(errorMessage);
+            alert.showAndWait();
+        } else {
+            Customer customer = currentCustomer;
+            if (currentCustomer == null) {
+                customer = new Customer();
+            }
+            customer.setFirstName(this.txtFirstName.getText());
+            customer.setLastName(this.txtLastName.getText());
+            customer.setEmail(this.txtEmail.getText());
+            customer.setPhone(this.txtPhone.getText());
+            customer.setBirthday((this.txtBirthday.getText() != null && !this.txtBirthday.getText().isEmpty()) ?
+                    LocalDate.parse(this.txtBirthday.getText()
+                            .replaceAll("\\s", "")
+                            .replaceAll("(^\\d\\.)", "0$1")
+                            .replaceAll("(\\.)(\\d\\.)", ".0$2")
+                            .replaceAll("\\.", ". "), DATE_TIME_FORMATTER) : null);
+            customer.setAddress(this.txtAddress.getText());
+            customer.setZipCode(this.txtZipCode.getText());
+            customer.setCity(this.txtCity.getText());
+            customer.setPatron(this.chkPatron.isSelected());
+            customer.setPhoto(this.filePhoto);
+            if (this.currentCustomer == null) {
+                this.currentCustomer = this.customerDAO.create(customer);
+                this.customerObservableList.add(currentCustomer);
+            } else {
+                this.customerDAO.update(customer);
+            }
+            this.tblCustomers.getSelectionModel().select(currentCustomer);
+        }
+    }
+
+    @FXML
+    private void reset() {
+        this.tblCustomers.getSelectionModel().clearSelection();
+        this.showCustomerDetails(null);
+    }
+
+    public void setCustomerDAO(CustomerDAO customerDAO) {
+        this.customerDAO = customerDAO;
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/ServiceNotAvailableException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/ServiceNotAvailableException.java	(date 1483360912000)
+++ src/at/ac/tuwien/qs/movierental/ServiceNotAvailableException.java	(date 1483360912000)
@@ -0,0 +1,23 @@
+package at.ac.tuwien.qs.movierental;
+
+/**
+ * Checkstyle :
+ * import wird nicht benötigt -->import java.io.IOException;
+ * daher wird er entfernt
+ */
+
+
+
+public class ServiceNotAvailableException extends Exception {
+    public ServiceNotAvailableException(String message) {
+        super(message);
+    }
+
+    public ServiceNotAvailableException() {
+        super();
+    }
+
+    public ServiceNotAvailableException(Throwable t) {
+        super(t);
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/ui/controls/RentalActionButton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/ui/controls/RentalActionButton.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/ui/controls/RentalActionButton.java	(date 1432685042000)
@@ -0,0 +1,32 @@
+package at.ac.tuwien.qs.movierental.ui.controls;
+
+import at.ac.tuwien.qs.movierental.Rental;
+import javafx.scene.control.Button;
+import javafx.scene.control.TableCell;
+
+import java.util.function.Consumer;
+
+public class RentalActionButton<TYPE> extends TableCell<TYPE, Rental> {
+
+    final Button payRentalButton = new Button("Rückgabe JA/NEIN");
+    final Button removeButton = new Button("Entfernen");
+
+    public RentalActionButton(Consumer<Rental> removeRentalButtonPressed, Consumer<Rental> payRentalButtonPressed) {
+        payRentalButton.setOnAction(event -> payRentalButtonPressed.accept((Rental) RentalActionButton.this.getTableView().getItems().get(RentalActionButton.this.getIndex())));
+        removeButton.setOnAction(event -> removeRentalButtonPressed.accept((Rental) RentalActionButton.this.getTableView().getItems().get(RentalActionButton.this.getIndex())));
+    }
+
+    @Override
+    protected void updateItem(Rental item, boolean empty) {
+        super.updateItem(item, empty);
+        if (item == null || empty) {
+            setGraphic(null);
+        } else {
+            if (item.getId() != null) {
+                setGraphic(payRentalButton);
+            } else {
+                setGraphic(removeButton);
+            }
+        }
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/ui/controls/TemporalAccessorCell.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/ui/controls/TemporalAccessorCell.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/ui/controls/TemporalAccessorCell.java	(date 1432685042000)
@@ -0,0 +1,29 @@
+package at.ac.tuwien.qs.movierental.ui.controls;
+
+import javafx.scene.control.TableCell;
+
+import java.time.format.DateTimeFormatter;
+import java.time.temporal.TemporalAccessor;
+
+public class TemporalAccessorCell<TYPE> extends TableCell<TYPE, TemporalAccessor> {
+
+    private DateTimeFormatter dateTimeFormatter;
+
+    public TemporalAccessorCell(DateTimeFormatter dateTimeFormatter) {
+        this.dateTimeFormatter = dateTimeFormatter;
+    }
+
+    @Override
+    protected void updateItem(TemporalAccessor item, boolean empty) {
+        super.updateItem(item, empty);
+        if (item == null || empty) {
+            setText(null);
+        } else {
+            if (dateTimeFormatter == null) {
+                setText(item.toString());
+            } else {
+                setText(dateTimeFormatter.format(item));
+            }
+        }
+    }
+}
Index: src/at/ac/tuwien/qs/movierental/ui/controller/MovieRentalController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/at/ac/tuwien/qs/movierental/ui/controller/MovieRentalController.java	(date 1432685042000)
+++ src/at/ac/tuwien/qs/movierental/ui/controller/MovieRentalController.java	(date 1432685042000)
@@ -0,0 +1,83 @@
+package at.ac.tuwien.qs.movierental.ui.controller;
+
+import javafx.fxml.FXML;
+import javafx.scene.Node;
+import javafx.scene.control.Alert;
+import javafx.scene.control.ButtonType;
+import javafx.scene.control.Tab;
+import javafx.stage.Stage;
+import javafx.stage.WindowEvent;
+
+import java.util.Optional;
+
+public class MovieRentalController {
+
+    @FXML
+    private Tab tabMovies;
+    @FXML
+    private Tab tabCustomers;
+    @FXML
+    private Tab tabRental;
+
+    private Stage primaryStage;
+
+    public void setMoviesTabContent(Node moviesTabContent) {
+        this.tabMovies.setContent(moviesTabContent);
+    }
+
+    public void setCustomersTabContent(Node customersTabContent) {
+        this.tabCustomers.setContent(customersTabContent);
+    }
+
+    public void setRentalTabContent(Node rentalTabContent) {
+        this.tabRental.setContent(rentalTabContent);
+    }
+
+    public void setPrimaryStage(Stage primaryStage) {
+        this.primaryStage = primaryStage;
+        this.primaryStage.setOnCloseRequest(event ->
+        {
+            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
+            alert.setTitle("Filmverleih | Programm beenden");
+            alert.setHeaderText("Programm beenden?");
+            alert.setContentText("Wollen Sie das Programm wirklich beenden?\nDabei gehen alle nicht gespeicherten Daten verloren.");
+            Optional<ButtonType> result = alert.showAndWait();
+            if (result.get() != ButtonType.OK) {
+                event.consume();
+            }
+        });
+    }
+
+    public void showLicense() {
+        Alert alert = new Alert(Alert.AlertType.INFORMATION);
+        alert.setTitle("Filmverleih | Lizenzinformationen");
+        alert.setHeaderText("Lizenzinformationen");
+        alert.setContentText("");
+        alert.showAndWait();
+    }
+
+    public void showAbout() {
+        Alert alert = new Alert(Alert.AlertType.INFORMATION);
+        alert.setTitle("Filmverleih | Über das Programm");
+        alert.setHeaderText("Über das Programm");
+        alert.setContentText("Dies ist ein Beispielprogramm zu Lehrzwecken das im Rahmen der Lehrveranstaltung " +
+                "Software-Qualitätssicherung an der Technischen Universität Wien entwickelt wurde.");
+        alert.showAndWait();
+    }
+
+    public void reinitDatabase() {
+        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
+        alert.setTitle("Filmverleih | Datenbank zurücksetzen");
+        alert.setHeaderText("Datenbank zurücksetzen?");
+        alert.setContentText("Wollen Sie die Datenbank wirklich zurücksetzen?\nDabei gehen alle Daten verloren.");
+        Optional<ButtonType> result = alert.showAndWait();
+        if (result.get() == ButtonType.OK) {
+            // TODO: replace dummyDAOs with real database
+        }
+    }
+
+    public void exitApplication() {
+        this.primaryStage.fireEvent(new WindowEvent(this.primaryStage, WindowEvent.WINDOW_CLOSE_REQUEST));
+    }
+
+}
diff --git resource/images/add.png resource/images/add.png
new file mode 100755
index 0000000000000000000000000000000000000000..daf914edde62a4c364d855650db0ffaf9e87fc62
GIT binary patch
literal 497
zc%17D@N?(olHy`uVBq!ia0vp^3LwnE3?yBabR7dy%*9TgAsieWw;%dH0CG7CJR*yM
z^gR$}y!)y-3&@Zxag8Vm&QB{TPb^AhC@(M9%goCzPEIUH)ypqRpZ(583aBVNz$e7@
z|Ns9CGypNS&sl(!Oi7SmFasMquc)}Los(x&b?uaCGiDz=bmZ!-2ai5|{`-$D@6t=4
zx+k74jv*GOTPI)N)NCN&%-SgMD#*!j&j0`Ceox?L*4$jR>G-WIPb-1v*LoFu=04qM
zH_?oneVSTrb>FH3tP8vJ9x@-eHQjZZXzG3@p5-dvC2zb+*{}YU?aX)OI<{rUEuSVc
zJ^L?nkzvdB?BMNU5^=R54!<qKxI-pQVVm)-g86o_k3f(oZ;tz4VaI-6Db2VA*UX!;
zB9fkNP`l50l4~bVRjv98_F(p>`c9m4-858Ao;mY|^Za$sNn8@53X@gtDR@e<%zrSg
zV0Ovz67i?&ZvEByzdQEek4eR@uTS4I@5{Hnzi0p3|Lh$-8b52e;!lFY$J5o%Wt~$(
F695_Hrn>+D

diff --git resource/images/new.png resource/images/new.png
new file mode 100755
index 0000000000000000000000000000000000000000..00d6bf7310a780c7462fd6dce155e25ca2f11f9f
GIT binary patch
literal 812
zc%17D@N?(olHy`uVBq!ia0vp^3LwnE3?yBabR7dy%*9TgAsieWw;%dH0CG7CJR*yM
z%CCbkqm#z$3ZS55iEBhjaDG}zd16s2LwR|*US?i)adKios$PCk`s{Z$Qb0wQ0(?ST
z|NsBbKmuSvMa(!56A&>GLW~TINQfB~F_Dcp>#l>s#kC~JFPMRmiIbaOKvG^wMN?PL
z)WOlo*~K$3I5aFeHol;yp?T``nRDkYShRB0`YpS5A2@XK^qI4lu3Wu#{l<ewkDtGI
z_4?h1FJFKBdu9d<F2-t47sn6@$<l+}LAM+jSTA^Qa#}d;hFC1`f*E2WUIKT_Iu^Dt
zeE(m6vbIIhxUIOsNU$&T-oeNsXWfqlem<*v{i7y+VPx6zt3l$Ml!aiI&u%$^%QG0Z
zKS@+5Fj-)@R(XLT`@EGa#pWDqytb*6b*tzf*<KF6{?<32=G~Gr-=Z={v42|ll})#r
z++H0P+<xBLYQNE>%@e}J)&HGsx;E{J#!|zt0b$(1V%JP2S;?%wJO51h?;NwJ%_`YU
zjyjEghqUtV3mkdkrjS1M{{8pjCQce*H_~)^4AT_vZ)$S#c>MKY`VlS5BW*p*G5?aM
zE@3`l!7xkG``Y5jZSiN-|88SnzHiCKw1<D!wHf7mJ+5^r@_zmF)^X42*Y5VD{PRfv
zuEHu~zw~3!=@owiY@`lN+_G-t@^2r$+H>1l2=>nH7u_0O^V9qFg@(&PSLQWX_A-dq
zXYdrLu(1a*2}>D1C=CwcoMTeu%=jgfm7zv*>j%%-VLiorT5h>LTI09w*g}V!?C%%N
Un44eK+Yd^Dp00i_>zopr0KTIJz5oCK

diff --git resource/images/pay.png resource/images/pay.png
new file mode 100755
index 0000000000000000000000000000000000000000..ae14f7063d4f7b5171a70b1870980eaaf05e0fab
GIT binary patch
literal 1123
zc$@)a1f2VcP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800004b3#c}2nYxW
zd<bNS00009a7bBm000p%000p%0qqod#{d8T8FWQhbW?9;ba!ELWdL_~cP?peYja~^
zaAhuUa%Y?FJQ@H11K>$SK~z|UwU%9ITvZUqe{*Ke?gsl2t)(?-41N$lP_z#%Xs8br
zQ4j=?N|8!~1z$vbC}IUsi&7y7iegd0fQaBrLGVQpu^<{B6e+e3n%0V9)z+`t(!?fr
z$A>-p(apWP%aRNnxc8j@nfaf&^PhXf-B~UZkpW=NI|K>K6j)7452@IUqW5<MyZe$3
zMehz`hgHmLLyrNaBK(pCj>JtW_GvS4a|GgJ%SHeyS89mwsaQ2Hcp9gG)k{hMSYyFn
zR<Zw5kTU^$#;`ks*r9e37Hr>=5C8@OwnxSONzUgr=<C3`7R<#KY_Ae00=8SlG8H=q
z4EId{2uhq#v7cK`_CA!Z?OK>2zO7=eL8tm6kdxLg4cpR%u(UjnsMxHEWhF{C_DmoW
zH>%jjEs~m1bXyOKxJgB4g4j3pv|F&r<mbb#1b|Tu@tu~+J{5?M0x_)*Td?P9dXGP<
z*t8NSfKW@hzS@+a?M{0JRqQVnbHnb)C6J2eMHQP%4$fJyeZZ=g&vBcIoy?V6(ESOs
zMaBMBu@g`pYt(|+=PKqYGoe8Ms08fsIztu9H0Tttp^e}=75k%u-rca<>uRZI%-vDq
z!z#AWz@j_d9Z~c_Bs>p(IdBm7$&C1&`|J-nJ$_9jj&y46^UR-c_ml1OWhvj_xHWNl
z+I{voDs~{TngiDM+nD+t0_8E4?1;mWtU7;ll=!R*PZu5#W;<md#{{^Df<Ldh&wX!d
zZ{jju&sN%$XQecj%nTr_W_wlaKnL6hnJ+v5Ec73$JgSm?0t{a;-K<i*CrRjqoXXzX
zt?L0Ry0>I~rQLU4+iegCV&4YrDO%cU8+Kg94yxFhwCC3(-}MDVH)zneRP6U22*jTN
zD?ANxSBE>mpHRNKIAi6jnw_%9glTtQ01&BMV`AGyq*8kyxB~IlC@$7ZRI+y)u0)1S
zY=?*p);{~(vHF^|?{xfV^6P2ykcu4!F%_Kxb}89bYHI0Zn?>YO;IxW;1*})>3t+qz
zl$U{jTVEn^ZG))GP-3>KOYmfsmDGB`U^?Dq?TAGg5M*QPCH}mhKcrH6L;{<$s!ReX
zd{*rq{TKJy;{YbMgAneODsL=86%}C+`?`yy_ILOxWrp3=LAIryWN5)&io{I?PGZ2G
zRI#%c2G^OQ;6PM#n~HtZ6M+VZ(sdn9v%;`j6ul2h*8^IFO_$lWCf9>msO|*z<gK~;
zSzx-G4-u&ZvF(d|_d>v(Cp6f0L4NB6pJPGA#(>p*5daWm6d3K3K(XKS9h(y(BTDJk
p0=x(ODA0on(*}H{6NZY`{|C{3@+dz5=o0_{002ovPDHLkV1kA_1JnQj

diff --git resource/images/rent.png resource/images/rent.png
new file mode 100755
index 0000000000000000000000000000000000000000..f2db6ecaf6dc73b098cd4eb7c4f32807a098f87a
GIT binary patch
literal 13872
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
C9f@xM

diff --git resource/images/save.png resource/images/save.png
new file mode 100755
index 0000000000000000000000000000000000000000..0e6d9b18fa10fb90747fdb8865197440ef75017c
GIT binary patch
literal 412
zc%17D@N?(olHy`uVBq!ia0vp^3LwnE3?yBabR7dy%*9TgAsieWw;%dH0CG7CJR*x3
z7z8;%nDM~VMG`<k$r9IylHmNblJdl&REF~Ma=pyF?Be9af>gcyqV(DCY@~pSVgr0a
zT>t<7&ww2;V?#_#3`~p+jMxw}BS;Db9n)GR3^YluB*-tAfsI{2NYc<KIwm$QJ|VHL
zVbkU<TeofBbL!mNcYprIJ{8#xRN3z7;uvCa`sf97p~D6|E*GcHF`lFR?cec|#EHvH
z6(0Dlu=reen6+(BnaGc)cHicH>H6kVb@cda*P>5Zzcqgrf1Ce)+fwu6`?yOVTd&N%
z?-^TKw_)y;rEe`4=ryF}|9KyM##g`Vy6#@N%kvY90`K}Wy%&A<PpBd=#6~>yJ=bwY
gPMHY@8adf^n#XLC5C7<%4GMJzPgg&ebxsLQ01Fm>wg3PC

diff --git resource/images/user.png resource/images/user.png
new file mode 100755
index 0000000000000000000000000000000000000000..4beb07929b36cda8b15eae421420937a99bb9017
GIT binary patch
literal 5319
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

diff --git resource/images/clock.png resource/images/clock.png
new file mode 100755
index 0000000000000000000000000000000000000000..3f5af00e70277e6a1399cafaddf33751027f3dc7
GIT binary patch
literal 674
zc%17D@N?(olHy`uVBq!ia0vp^3LwnE3?yBabR7dy%*9TgAsieWw;%dH0CG7CJR*x3
z7#O2Ln6c;@cMnidvcxr_Bsf2<q&%@Gm7%=6TrV>(yEr+qAXP8FD1G)j8!4co6#+gW
zuK)l4XCMbKqar3aV#0<P85m)R83{2Fk1kcJPXStMUJ~RN%)rFV!phFUCn6>xsiLcI
zY-Z=_6&aJ5m0M8Q(%V02`i$8dcJDiQ=*Wqyx9;A%|LF0j&tJd)`2E-W(1nY@K+^Pd
zaSX9I-8%VZSaSkT%W>8#*SealH9}m)0yQqxz5kyUcVScY2~qW#^Hq$6S8^WaJ5;jS
z^Y8&PlfI?#7hE3dv!`Cxed+pg*4<x9>n?|ixkiT8AMf6_?-b*<?Bf$u4oBuQehU3;
z$L_J_TkBMYC%@}w7;gAnW$T;Iex&pqYuUL1?R54XleXwE=I`0gKE>P9Zo-V@hM5fe
zQbaavRhuz+YwMv2ylYfF&ExrNk4SA0W%$~%{lk^{!W<$_TdzM$Z7|T{nCet^f=5tt
z$t{N^e2+FVcO+b9f6@CWgW<)t3!x`pZ*Wcbm|Oq3(n@AiY_PigpO~I&Ih~iZ_g|Z_
zV%n?f9kUng5`4YuRd$uY>WR0X|E&mm*PN&~|NJsu<NTeGm(Sg<`&aPHKmT9FfBXOT
XofiJWypJs;K=JMA>gTe~DWM4f4qDo6

diff --git resource/images/cover.png resource/images/cover.png
new file mode 100755
index 0000000000000000000000000000000000000000..0b3bba1dcbb90b3a117f7b7a6f8296926d252427
GIT binary patch
literal 5597
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

diff --git resource/images/movie.png resource/images/movie.png
new file mode 100755
index 0000000000000000000000000000000000000000..18fabd56c38b20fc0176fa58526bfd9bfe2d132f
GIT binary patch
literal 620
zc$@)j0+aoTP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800004b3#c}2nYxW
zd<bNS00009a7bBm0001Z0001Z0qXK<_5c6?8FWQhbW?9;ba!ELWdL_~cP?peYja~^
zaAhuUa%Y?FJQ@H10qIFZK~z|U?bN|*&v6{b@yB=AY%}9%g&ionP|5`nM+bJJ6jD<T
zJ1BRB93|yKad7buP^27`3ni(QNOn<_#%enldprETYoERS#>#A$-@87C@8|XUyg$#+
z=l%YEM1=o2untFX4X<!?j=lr{d+-HOkDH4MfYmsFi+GAlO*{h_tpVOG8UQ-+tT^4w
zxQ&&`+gFz$uxY^nXvaQWz%BG7y$6q)Ks-Qq@~*{UbS($~r!bikzr=>*TZOyH_Xb0M
zJz$-n1Lv`=3B=_lr~80`<f|}@<LFy(8H)s;>TccL1mY}yCWseU|IbZaY;vzoJc+?3
z5QDgblVuYvCcv5EbU$!xu{QbBSZOw%;BkGm&oLrJRaINjT}+Kd#AxztM_V!VF(N(}
zdWXilFcJ~p%NtmiYJ4u0U?-*ueHsUo=S0dej?Kw)wbuG`2}*#cXe+dKyiUn)q{Mv~
zOP-<R*=x3$=LML+mbCCnO8nmMkIen#d6@Jrye;&30fy7UT^dbUUj6>$Ih{8DijB#0
zJ$d>gLRE{Zs;bb7Z!t63nD5khsAgh1BF2kvRaLEFPD4*c#6<G+YCKjmF&+`qB|wix
z?UyPJMa0LFdIfeYAwWBG|JP-S7C;N21<(R$0ki;?9pD#v9LRLF=H9yi0000<MNUMn
GLSTXw-Vn<G

diff --git resource/images/users.png resource/images/users.png
new file mode 100755
index 0000000000000000000000000000000000000000..a779c46cc37eaa39e9b47956a0a943716603a66c
GIT binary patch
literal 708
zc$@*m0z3VQP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800004b3#c}2nYxW
zd<bNS00009a7bBm000F3000F30lb7RF#rGn8FWQhbW?9;ba!ELWdL_~cP?peYja~^
zaAhuUa%Y?FJQ@H10zpYcK~z|U?UzAo6G0Tme{YR#RZ^8kX`vVq&(f+V>nE@$kG*>F
z<QMP*NWojbLoZ%~6pDE8s92#?3sOY!5^0sHMI$769`<cJoy_h|QXwAt;7>NY^Lzid
zGqW?hqN)rtlA*f)4+T_;E{ez%;09@-uT^y`CaH*AHLh#ihup@h+9O~ZSOL`2GoT(~
zjH_E4pIZT@gG?Yv4QK|EWZD6y0^F2c%j23rEvA6wf+U$50j?3jEf*F5i~y~OL|vfj
za8)~3#<hSE*VBIrt^uRD6XqZUm~sBk*txP8HIM!93)qcFlEwF&<FYvH5g5y&iInL#
zP;r=woh##Ze812_^eEyk7FD(F+(a8#jNp262YMi(ct)?fcklJWY5~^(lG4Y}k_m7h
zSO?ms4d4MF1q+c_n+=Csw_HI^{M}GQs=zF89XJP^vc$iDJ>Wg?QdOHCH*U-<a27bt
z!F<^T)_^yv`ZG8Lz!>lt=oEBgra!=vac6*~NUmcZV~2(Sm;~NMByjZ*xD0Id$*Flw
zx&_26qpsF~lfd%<%=af{Hv9_%z;}UrM=;N{kO1@aAFqHr18{!K18hcCo2hAC_pwhd
zq)mvMy{=x6?wUt6SD=&7|9fF~046Vzp}&+K7m$#y@%@C5&V$xJ@c&i;&Xc~w&jGjX
zw^jgM0!|or)7sAgw}6Qf!#&c+_bu=Qc-pfY0*FW*xM&F{NO!j%z_#hLs&0FXkbW0j
qaJX^ci<y2>)vrBX#~-J|F5oYDyM=!Kr>f-u0000<MNUMnLSTaX!Z#`a

diff --git resource/images/delete.png resource/images/delete.png
new file mode 100755
index 0000000000000000000000000000000000000000..89ed9293fa4d5ccabb5eeb88faaa2bcbe03bdd00
GIT binary patch
literal 320
zc%17D@N?(olHy`uVBq!ia0vp^3LwnF3?v&v(vJfv=3*z$5DpHG+YkL80J)q69+AZi
z4Ez^Cm@&*iY6(zKvcxr_Bsf2<q&%@Gm7%=6TrV>(yEr+qAXP8FD1G)j8!4b7(Ey(i
z*Z=?jGk^daGb0NNBMUPa<(uc|gTzXL{DK)IH1=PAp1Sm)E>NV~)5S4FBRF-^M!^OH
z4%huN4;*6L^LbN4>)u}Gh!n=N_v=}>9c}8QI4V^R@Eff8am|Qn#;-TOFO?-&R8%ea
zBxg9WZ;IQy8y@ajC%LBrnV(9M9p)ddQ-A03?zQVGMMeps21WY^u5}H{ASRoNYP{C@
wXNQ)2xie?We0CM(DT>`ZN>e;Elb*l-z)*A}X6uThU0~OHy85}Sb4q9e01iBCM*si-

diff --git resource/images/filter.png resource/images/filter.png
new file mode 100755
index 0000000000000000000000000000000000000000..3f7b5f00708af8c100f7e103601160736d9f097e
GIT binary patch
literal 308
zc%17D@N?(olHy`uVBq!ia0vp^3LwnF3?v&v(vJfv=3*z$5DpHG+YkL80J)q69+AZi
z3_>L!%y=(Nz5*yHS>hT|5}cn_Ql40p%1~Zju9umYU7Va)kgAtols@~NjTBIkdVo)e
z>;M1%8HfN%Q~l-vDV~xbzhDLtQS;!C6)RW0eD$ID^^;DZc)F*HV~EE2WQ%4t2?LgI
z3qJW9M=a*bNlS1GEV|Xe7<w{|jZH*VfmOrHfosB42N4C$MhypzM$HCoAl7u$XwY)h
zV9@epW>R5|V7T$v+4X_SE(fJq2SiNH%ZfXQT8K70`>STb%}_71Cd~X^(h-o8JYD@<
J);T3K0RSF3Qi1>g

diff --git resource/images/invoice.png resource/images/invoice.png
new file mode 100755
index 0000000000000000000000000000000000000000..c1b2afbaac4a68563014af0f5469fa84ee3a158f
GIT binary patch
literal 734
zc$@*=0wMj0P)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800004b3#c}2nYxW
zd<bNS00009a7bBm0003S0003S0gd-g<p2Nx8FWQhbW?9;ba!ELWdL_~cP?peYja~^
zaAhuUa%Y?FJQ@H10$WK$K~z|U#n-=U6j2bs@z1*`1O<brL=sGh2>u`hMbsdOf~ouq
z6q|@5f`vZ{{{)*9Hg^6%1W|0%LJ%U+N)JSd2ofw317Z`S2%=q{#qQ~Px0_4MEg2ZN
zH#c+heKYg+_K7iyF+v|6U>5N|bqd$9ruMtdw3fURGfPNZuM_BA48TYWlh^bEx)usB
zRsuk+5*z0Os7Pd$eEEb61>Y@1wqh)V&{^cLqQL$Iw{R05@eM~Yl!=+f!<^WD9L}t_
zrx1r?j57`1X$z|UmhBgIq>1)m4LVZ4Ga0`pxjiLdQe!*bVSUjIWC2D~+j)#*5I-cx
z>svE`G<G5fAmT07WqtEnQ0v!wd`~~G#>qOr-Vnn1ocLXm-si~xo`w((#~8mNw*nD^
zsl6TDcvi5Z|JCPcD{4VZcYXz1GG*<@XbU0E%?D7^@wA+0CBwB2b1ee6Uo->o0{c_P
zwYZ8mF~*l6gs&;cD_kmw&yxyH;aIxfgxm^TPHlT7kLUqh!%FmK{0dLOJg1{46JITA
z!8DHK1aFfJ&r$$}>H+dv(1XVzgh|}S9o)n2I={gXLUoZX*jaBZngQ61)7X%c96GRX
z5dei$^GTQF1e7Mt07{oUfZ-TpXtkmZ7Z(EXsMWiK7~>r7*4y)j@OTK}MhOfR3^!Pt
zJc`TIYW9_E*<{%P@@C)%UYC%oB6-DYZw7E6#yDOAfDpn#$^XeeRQ2+?jO3|I)f;LR
z_?fYdgb*6eYYU`;6Pb0Av&5@eGaV`Oa@tI1(D?@-w(fe~OlQ*^eYL#50oH*FEW%rO
QE&u=k07*qoM6N<$f<yE;rvLx|

diff --git resource/images/picture.png resource/images/picture.png
new file mode 100755
index 0000000000000000000000000000000000000000..88c4d365434418a70337364eb32a37c798980469
GIT binary patch
literal 539
zc%17D@N?(olHy`uVBq!ia0vp^3LwnE3?yBabR7dy%*9TgAsieWw;%dH0CG7CJR*yM
z^nVa$oZIRk1!PE;xJHx&=ckpFCl;kLl$V$5W#(lUCnpx9>g5-u&wghEQZzZhC&cyt
ze~`vO1++zV?*J)-k|4ie1}0_}RyKAnZaz^d85MOcTL&+{fQZQWw1VoUiIZn9TDE%4
zsk2vaJ$U@$-PdnFe*XK)Wnc}|yU)|bF~s8Z(#tpbnhZo(E)*VS)eT$Ib+op5mBs)6
zrFIhq7OEcF^G)ULlW$B7^Dl5%D0!}Wc3`@Z(#ljzMh1n2rjZN`B`!=2E18`%eT~BG
zJBt&t7v5^9<F(jR?q{HEFD(AzPGxEQ!?V@7(N`MJKF+9oQm{3?e|Pkx=UxhVD)Tix
zivk&!WhVA5H<F0yYOd=&r4S<~R8@a{%^!m(&56v>KC%i7EHnSwFfy=+Mlbes3;K1f
iS9@CqTT9|2<{wN&e*%^$G;P}f3Jp(JKbLh*2~7Z(OOqo2

diff --git resource/images/overview.png resource/images/overview.png
new file mode 100755
index 0000000000000000000000000000000000000000..7b0820b20b913cb6c6625a7b3dc76b36743da1f4
GIT binary patch
literal 938
zc%17D@N?(olHy`uVBq!ia0vp^3LwnE3?yBabR7dy%*9TgAsieWw;%dH0CG7CJR*x3
z7&z{LFys6e@iss~$r9IylHmNblJdl&REF~Ma=pyF?Be9af>gcyqV(DCY@`?%7=r_R
zLR|m<|IdIAa4;~igAp4W0~;#?D<)!LV8KMp49vtKRwgK7K}IZ0_z*J_Gj7C+ju=@;
zMNCMD1&o*(nPG^q_FIzj4}l?9P!i-9%)rFV#VaTzE+em?qOPH<Z(wX<W^Q3=ZR_ad
z>h9|w5Ev935*85|6&;_Dm0wm~QB~X6+|t_B)7#fSVe*veGiJ`7GjINag^O3LT(xH1
z`i+~nY~QhS@BRZvj-NPn`uwHKSFYW<eeeFOx9>lE{QULX_aA=`=yF;Dqt@5c#WBR<
z^xjFC=1zekZT*oQXFNTG1gGAdYS@(_(AjhH#)04e?QfRHN0!GP@6w;A|K76N{<Y6{
zu7yT2Ry%9k`lj!`e4=B;h3Sn`-ZWgx*Sq-SS4Fw6yGEt!(IRf{#0ST;_FeQp)o5j~
zpE=gaNqy}_$Cqq+ty78<CMB_PeBP6px%p6AtnM4e%_5EtiHU*bjp|!BaIt76IW(}|
zejMHUX<8HqgJGA*gURy`vM>1;EOBMtje~OwT?5y!J#^X~*Vn4jE5_q=TO>Jg;qAvC
zxBLrTvCH+U^R?MC*~FwWL(&C;Zi(G$@4uXJPQhosVV&5YmnFBp{+{0RsmSPAqsCFA
z4SM3+8b!JEH|UECHB3L`Sig5m{A6}F&D$^ioQ)2C{dv1vdBFzbq}Ll?yx6*1*;V1(
zvXw3J8nd=+onu+~Kk?0Li*tw1{9U~-{6xC2@YbyN%+a}PJx+4S=z#Krr>mdKI;Vst
E04Nv>pa1{>

diff --git resource/images/selectUser.png resource/images/selectUser.png
new file mode 100755
index 0000000000000000000000000000000000000000..ffeb6909ad77fbe273757be803177704d691482c
GIT binary patch
literal 883
zc$@)q1C0EMP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800004b3#c}2nYxW
zd<bNS00009a7bBm000vI000vI0di)#;{X5v8FWQhbW?9;ba!ELWdL_~cP?peYja~^
zaAhuUa%Y?FJQ@H10`N&hK~z|U&6Z1uR96s&zrRkKsALogisEa6W0*i9_+V5-5hWn#
z!mQL~aFK;3V04jH5ENV~Dy|L0o#JLh5JXgbB%%!(B1p2(QHco+hKR<InZD(s&*-)7
zzJ2et7al0M)H&y`zaFRR%H7FYk|rCr%kkx)g}{H{RmTS1M~`J*&a>RTtw3e1u=~Qi
zwdgc3Jqx3gWEf|Guovx(k4d-=RJuw47$@vzXX6b4`>`wmwW<MW+!~RbE0D=r;`M1|
zO2AsHlf?ybrb?RKH39~o7Kf^oxYLF}0)G^T8ZB|BZ3?Vf5U1wu54uQT^b&9@FNnjD
zGR7O1-^V_X>V#{A-OK2NgS=xWY}p6WOHvQmcS_9yK{Y|A+((a>4*eK@Cju!VGa)R3
zdJU+$`^dW*2RfyIc|s?IJ!%U7|3c>t+YR(|eHZ}-wnNyn9JAmy(AQN0hW(s(5JmYH
zD(ircfmIMT0&_|cfUu>Y@hth<u*1Mdxn6;!S;Bq?CYLCu=ip}@T?74P_+p3Ez~{h_
zV_V%v-kz{;dT-myc^WPQ^P@98z;s|dAh2!1o(dZVKFdr&iQKyg7XV9P9Bllggw3g<
zUMZ|D!Y}Ewjq~Yfz(B#UKXd9|yL*y#$lWgq4uLO&uqnOQJdEZRu`U>N_q%z{CL{+M
z27P5SyVn(o4HpSN*!MB)dqnuPA+MU&pJO@*n<D;05pJYyR*HDsA_foR$9(XmO`Cn-
zeerunJpTavldeU;u)VR!rUJb{uVF`HbiN(a0h55x=&U-E5dmETKFsI6FL8WDbfN~-
z0D{7kh*fj<d#{kC0brug^|lcxB8L4GpW9bW`c}`-M7S!f4lL<73v%^v=#44+2k3vT
zudD_8f!K5a8MZH`Y=5p{l%GV{5J@}-+ey=C2EGvCVyv0pfC*hC5Iz1<*ibZ57j{SJ
zys*bnml$>knAmX`m0glP0Q*MxdQd+w1$0w*H6c0a?pNB~eF?h)rzQ;KaU1{u002ov
JPDHLkV1kTOiIM;S

diff --git resource/images/deselectUser.png resource/images/deselectUser.png
new file mode 100755
index 0000000000000000000000000000000000000000..b01d14bc6499083e66e2e84430f68993052e9234
GIT binary patch
literal 884
zc$@)r1B?8LP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800004b3#c}2nYxW
zd<bNS00009a7bBm000vI000vI0di)#;{X5v8FWQhbW?9;ba!ELWdL_~cP?peYja~^
zaAhuUa%Y?FJQ@H10`W;iK~z|U&6Z7QTvZgufB*9)lm<hTk|G#IF}5jaAx#iOY$a~2
zqUbVoS?DH3uy&D^bP;f)1>53Q{J@2!o0LL}NDTFZ5C@{Dl&&;WY)e25<f~-n9T#&4
zU&fg?@4d{T7Y;Mrch5QhbI$*sbLH-&ElK@`op$^=&<L;sUUqE8z4}?Ia+c-pZ3Rj%
z30o58twmRWhtq6yk`(706n3w@^M*tVK&h($fF5Csot@VO?A@XO)QSUA&$x)c&QZzb
z*lT->P{3Mm$D=vz3`lykYXA)P<u_F-pwk9G3^((esus{`TLLTRw6pB)l`aCPUI%{4
zYQ*6}5$AQ~`>_usI^npm-%~o_3_I+EE&D)nN$LZ8ONm(^D97lsd-co0sc+ct1Rw$A
z5r_^!Z5b%L`_@jK1D#61lR_7T-EK<%y3nj)XMn!04<o?9-WIl&VHW%f40RQNVV`Cl
zL_z+B(#yae;4nmQ0FM;{0MSHF=V@}suyeoznQnokL1DiD{RQZ>0sfVvdC;GRk2<^v
zJPrKe*m3u*|4-QM(c8&lkw)JFPqpBZz$S&Q3flw@q?VvS?OjCQ)Je;;&13{d!tV>h
zY9jgpu(kk%-N*@G6?g*JFYF&-l?Di~DPb{0Cqi&%>#wJ1A`QSs9sq`Y5h9EX`#kJd
z40}KPUxU(kI5QY@K1u_ynFj#asYJSyAhtPA*uN#BAGeo%M@zR7WUj^VTjJviRF|60
zSHK6`-h#XtFl;(;gQgmh3telJ<3COig>P4rK1)pq=Yd_>qW3Y!p9hfips-0`-Lco8
zI%nt;hhswLfuq1E&?~giHUoLYu#W?)-wY8B0Y{oRF%1j=CZg|!)qt^%vmjFshsQ(7
z?gGOp=VaJ>p=2Lq8b;YcM6av<Y}){Pho;dCJR_pHz=xlK-CYF`K)fQX5}efP%}lex
z{tA1sVIKm$t@Ja$h|-p%U0^4KzX}=#9s(^2FUQ1}-2J<Dy8i+qTL84E-LSR*0000<
KMNUMnLSTXb<%_HU

